From 4cd3cb914af980162ae8f0d484d528d7d8835547 Mon Sep 17 00:00:00 2001
From: Sean Kelly <seandtkelly@gmail.com>
Date: Fri, 3 May 2019 21:06:14 +1200
Subject: [PATCH 3/3] SC1135 support

---
 .../isp2/sensor/aptina_ar0130/ar0130_cmos.c        |  359 ++---
 .../isp2/sensor/aptina_ar0130/ar0130_sensor_ctl.c  |  431 ++----
 .../isp2/sensor/smartsens_sc1135/Makefile          |   75 +
 .../isp2/sensor/smartsens_sc1135/sc1135_cmos.c     | 1450 ++++++++++++++++++++
 .../sensor/smartsens_sc1135/sc1135_sensor_ctl.c    |  358 +++++
 5 files changed, 2229 insertions(+), 444 deletions(-)
 create mode 100644 mpp2/component/isp2/sensor/smartsens_sc1135/Makefile
 create mode 100644 mpp2/component/isp2/sensor/smartsens_sc1135/sc1135_cmos.c
 create mode 100644 mpp2/component/isp2/sensor/smartsens_sc1135/sc1135_sensor_ctl.c

diff --git a/mpp2/component/isp2/sensor/aptina_ar0130/ar0130_cmos.c b/mpp2/component/isp2/sensor/aptina_ar0130/ar0130_cmos.c
index 5215615..f9530d9 100644
--- a/mpp2/component/isp2/sensor/aptina_ar0130/ar0130_cmos.c
+++ b/mpp2/component/isp2/sensor/aptina_ar0130/ar0130_cmos.c
@@ -22,7 +22,6 @@ extern "C"{
 /*set Frame End Update Mode 2 with HI_MPI_ISP_SetAEAttr and set this value 1 to avoid flicker in antiflicker mode */
 /*when use Frame End Update Mode 2, the speed of i2c will affect whole system's performance                       */
 /*increase I2C_DFT_RATE in Hii2c.c to 400000 to increase the speed of i2c                                         */
-#define CMOS_AR0130_ISP_WRITE_SENSOR_ENABLE (1)
 /****************************************************************************
  * local variables                                                            *
  ****************************************************************************/
@@ -31,37 +30,49 @@ extern const unsigned int sensor_i2c_addr;
 extern unsigned int sensor_addr_byte;
 extern unsigned int sensor_data_byte;
 
-HI_U32 gu32FullLinesStd = 750;
+#define VMAX_ADDR_H              (0x320e)
+#define VMAX_ADDR_L              (0x320f)
+
+#define SENSOR_720P_30FPS_MODE  (1)
+
+#define INCREASE_LINES (0) /* make real fps less than stand fps because NVR require*/
+#define VMAX_720P30_LINEAR     (1000+INCREASE_LINES)
+#define FULL_LINES_MAX  (0xFFFF)
+#define CMOS_SC1135_SLOW_FRAMERATE_MODE (0)
+
+static HI_U32 gu32FullLinesStd = VMAX_720P30_LINEAR;
+static HI_U32 gu32FullLines = VMAX_720P30_LINEAR;
+
 HI_U8 gu8SensorMode = 0;
 
-#if CMOS_AR0130_ISP_WRITE_SENSOR_ENABLE
+static HI_BOOL bInit = HI_FALSE;
+static HI_U8 gu8Fps = 30;
+
 ISP_SNS_REGS_INFO_S g_stSnsRegsInfo = {0};
-#endif
 
 static AWB_CCM_S g_stAwbCcm =
 {
- 
-       5000,
-       {
-         0x01a2, 0x8080, 0x8022,
-         0x8068, 0x0178, 0x8010,
-         0x8008, 0x811A, 0x0222
-       }, 
-       
-       3200,
-       {
-         0x01e0,0x807b,0x8065,
-         0x804f,0x0165,0x8016,
-         0x001f,0x8126,0x0206
-       },
-       
-       2600,
-       {
-         0x0200, 0x80c3, 0x803D,
-         0x8057, 0x015C, 0x8005,
-         0x8020, 0x8290, 0x03b0
-       }
- 
+	4850,
+	{
+		0x01B6,  0x80B4,  0x8002,
+		0x805D,  0x01A2,  0x8045,
+		0x000A,  0x813F,  0x0235
+	},
+
+	3160,
+	{
+		0x01B5,  0x8071,  0x8044,
+		0x808A,  0x01B9,  0x802F,
+		0x8003,  0x81B5,  0x02B8
+	},
+
+	2470,
+	{
+		0x014F,  0x0091,  0x80E0,
+		0x8095,  0x01E5,  0x8050,
+		0x803B,  0x81CF,  0x030A
+	}
+
 };
 
 static AWB_AGC_TABLE_S g_stAwbAgcTable =
@@ -170,7 +181,7 @@ static ISP_CMOS_GAMMA_S g_stIspGamma =
     /* bvalid */
     1,
     
-#if 1    
+#if 1
     {0  ,120 ,220 ,310 ,390 ,470 ,540 ,610 ,670 ,730 ,786 ,842 ,894 ,944 ,994 ,1050,    
     1096,1138,1178,1218,1254,1280,1314,1346,1378,1408,1438,1467,1493,1519,1543,1568,    
     1592,1615,1638,1661,1683,1705,1726,1748,1769,1789,1810,1830,1849,1869,1888,1907,    
@@ -262,20 +273,17 @@ HI_U32 cmos_get_isp_black_level(ISP_CMOS_BLACK_LEVEL_S *pstBlackLevel)
 
 HI_VOID cmos_set_pixel_detect(HI_BOOL bEnable)
 {
+	HI_U32 u32Lines = VMAX_720P30_LINEAR * 30 /5;
+
     if (bEnable) /* setup for ISP pixel calibration mode */
     {
-        sensor_write_register(0x300C, 0x4D58);	//5fps
-        sensor_write_register(0x3012, 0x05DA);	//max exposure lines
-        sensor_write_register(0x30B0, 0x1300);	//AG, Context A
-        sensor_write_register(0x305E, 0x0020);	//DG, Context A
-        sensor_write_register(0x3100, 0x0000);
-	    sensor_write_register(0x3ee4, 0xd208);
+		sensor_write_register(0x320e, (u32Lines >> 4) && 0xFF);
+		sensor_write_register(0x320f, ((u32Lines<<4)&&0xF0));
     }
     else /* setup for ISP 'normal mode' */
     {
-        sensor_write_register(0x300C, 0xa78);	//25fps
-        sensor_write_register(0x3ee4, 0xd308);
- 	    sensor_write_register(0x3100, 0x0004);
+		sensor_write_register(0x320e, (gu32FullLinesStd >> 8) && 0XFF);
+		sensor_write_register(0x320f, gu32FullLinesStd && 0xFF);
     }
 
     return;
@@ -362,11 +370,11 @@ static HI_S32 cmos_get_ae_default(AE_SENSOR_DEFAULT_S *pstAeSnsDft)
     pstAeSnsDft->au8HistThresh[2] = 0x60;
     pstAeSnsDft->au8HistThresh[3] = 0x80;
     
-    pstAeSnsDft->u8AeCompensation = 0x40;
+    pstAeSnsDft->u8AeCompensation = 0x2b;
     
-    pstAeSnsDft->u32LinesPer500ms = 750*30/2;
-    pstAeSnsDft->u32FullLinesStd = gu32FullLinesStd;
-    pstAeSnsDft->u32FlickerFreq = 0;//60*256;//50*256;
+	pstAeSnsDft->u32LinesPer500ms = gu32FullLinesStd*30/2;
+	pstAeSnsDft->u32FullLinesStd = gu32FullLinesStd;
+	pstAeSnsDft->u32FlickerFreq = 0;
 
     pstAeSnsDft->stIntTimeAccu.enAccuType = AE_ACCURACY_LINEAR;
     pstAeSnsDft->stIntTimeAccu.f32Accuracy = 1;
@@ -376,18 +384,18 @@ static HI_S32 cmos_get_ae_default(AE_SENSOR_DEFAULT_S *pstAeSnsDft)
     pstAeSnsDft->u32MinIntTimeTarget = 2;
 
     pstAeSnsDft->stAgainAccu.enAccuType = AE_ACCURACY_TABLE;
-    pstAeSnsDft->stAgainAccu.f32Accuracy = 6;    
-    pstAeSnsDft->u32MaxAgain = 23088;  /* 9db + 18db(8) */
+    pstAeSnsDft->stAgainAccu.f32Accuracy = 0.0625;
+    pstAeSnsDft->u32MaxAgain = 15400;
     pstAeSnsDft->u32MinAgain = 1024;
-    pstAeSnsDft->u32MaxAgainTarget = 23088;
+    pstAeSnsDft->u32MaxAgainTarget = 15400;
     pstAeSnsDft->u32MinAgainTarget = 1024;
 
     pstAeSnsDft->stDgainAccu.enAccuType = AE_ACCURACY_LINEAR;
-    pstAeSnsDft->stDgainAccu.f32Accuracy = 0.03125;    
-    pstAeSnsDft->u32MaxDgain = 255;  /* (8 - 0.3125) / 0.03125 = 255 */
-    pstAeSnsDft->u32MinDgain = 32;
-    pstAeSnsDft->u32MaxDgainTarget = 255;
-    pstAeSnsDft->u32MinDgainTarget = 32;
+    pstAeSnsDft->stDgainAccu.f32Accuracy = 0.0625;
+    pstAeSnsDft->u32MaxDgain = 4096;
+    pstAeSnsDft->u32MinDgain = 1024;
+    pstAeSnsDft->u32MaxDgainTarget = 4096;
+    pstAeSnsDft->u32MinDgainTarget = 1024;
 
     pstAeSnsDft->u32ISPDgainShift = 8;
     pstAeSnsDft->u32MaxISPDgainTarget = 4 << pstAeSnsDft->u32ISPDgainShift;
@@ -416,46 +424,50 @@ static HI_S32 cmos_get_sensor_max_resolution(ISP_CMOS_SENSOR_MAX_RESOLUTION *pst
 /* the function of sensor set fps */
 static HI_VOID cmos_fps_set(HI_U8 u8Fps, AE_SENSOR_DEFAULT_S *pstAeSnsDft)
 {
-    switch(u8Fps)
-    {
-        case 30:
-            // Change the frame rate via changing the vertical blanking
-            gu32FullLinesStd = 750;
-            pstAeSnsDft->u32MaxIntTime = 748;
-            pstAeSnsDft->u32LinesPer500ms = 750 * 30 / 2;
-            sensor_write_register(0x300c, 0x8ba);
-        break;
-        
-        case 25:
-            // Change the frame rate via changing the vertical blanking
-            gu32FullLinesStd = 750;
-            pstAeSnsDft->u32MaxIntTime = 748;
-            pstAeSnsDft->u32LinesPer500ms = 750 * 25 / 2;
-            sensor_write_register(0x300c, 0xa78);
-        break;
-        
-        default:
-        break;
-    }
 
-    pstAeSnsDft->u32FullLinesStd = gu32FullLinesStd;
-
-    return;
+	HI_U32 u32VblankingLines = 0xFFFF;
+	if ((u8Fps <= 30) && (u8Fps >= 1))
+	{
+		u32VblankingLines = (VMAX_720P30_LINEAR * 30) / u8Fps;
+	}
+	else
+	{
+		printf("Not support Fps: %f\n", u8Fps);
+		return;
+	}
+
+	gu32FullLinesStd = gu32FullLinesStd > FULL_LINES_MAX ? FULL_LINES_MAX : gu32FullLinesStd;
+
+	sensor_write_register(0x320e, (u32VblankingLines >> 8) & 0xff) ;
+	sensor_write_register(0x320f, u32VblankingLines & 0xff);
+
+	pstAeSnsDft->u32MaxIntTime = u32VblankingLines - 4;
+	gu32FullLinesStd = u32VblankingLines;
+	gu8Fps = u8Fps;
+	pstAeSnsDft->u32LinesPer500ms = gu32FullLinesStd * 30 / 2;
+	pstAeSnsDft->u32FullLinesStd = gu32FullLinesStd;
+
+	return;
 }
 
 static HI_VOID cmos_slow_framerate_set(HI_U16 u16FullLines,
     AE_SENSOR_DEFAULT_S *pstAeSnsDft)
 {
-    sensor_write_register(0x300A, u16FullLines);
+    u16FullLines = (u16FullLines > 0xFFFF) ? 0xFFFF : u16FullLines;
+	gu32FullLines = u16FullLines;
+
+	u16FullLines = (u16FullLines > FULL_LINES_MAX) ? FULL_LINES_MAX : u16FullLines;
+
+	sensor_write_register(0x320e, ((u16FullLines >> 8) & 0xFF));
+	sensor_write_register(0x320f, u16FullLines & 0xFf);
+
+	pstAeSnsDft->u32MaxIntTime = gu32FullLines - 4;
 
-    pstAeSnsDft->u32MaxIntTime = u16FullLines - 2;
-    
     return;
 }
 
 static HI_VOID cmos_init_regs_info(HI_VOID)
 {
-#if CMOS_AR0130_ISP_WRITE_SENSOR_ENABLE
     HI_S32 i;
     static HI_BOOL bInit = HI_FALSE;
 
@@ -470,100 +482,127 @@ static HI_VOID cmos_init_regs_info(HI_VOID)
             g_stSnsRegsInfo.astI2cData[i].u32DataByteNum = sensor_data_byte;
         }
         g_stSnsRegsInfo.astI2cData[0].bDelayCfg = HI_FALSE;
-        g_stSnsRegsInfo.astI2cData[0].u32RegAddr = 0x3012;
+        g_stSnsRegsInfo.astI2cData[0].u32RegAddr = 0x3e01;
         g_stSnsRegsInfo.astI2cData[1].bDelayCfg = HI_FALSE;
-        g_stSnsRegsInfo.astI2cData[1].u32RegAddr = 0x30B0;
+        g_stSnsRegsInfo.astI2cData[1].u32RegAddr = 0x3e02;
         g_stSnsRegsInfo.astI2cData[2].bDelayCfg = HI_FALSE;
-        g_stSnsRegsInfo.astI2cData[2].u32RegAddr = 0x305E;
+        g_stSnsRegsInfo.astI2cData[2].u32RegAddr = 0x3e08;
         g_stSnsRegsInfo.astI2cData[3].bDelayCfg = HI_FALSE;
-        g_stSnsRegsInfo.astI2cData[3].u32RegAddr = 0x3100;
+        g_stSnsRegsInfo.astI2cData[3].u32RegAddr = 0x3e09;
         g_stSnsRegsInfo.bDelayCfgIspDgain = HI_FALSE;
 
         bInit = HI_TRUE;
     }
-#endif
+
     return;
 }
 
 /* while isp notify ae to update sensor regs, ae call these funcs. */
 static HI_VOID cmos_inttime_update(HI_U32 u32IntTime)
 {
-#if CMOS_AR0130_ISP_WRITE_SENSOR_ENABLE
     cmos_init_regs_info();
-    g_stSnsRegsInfo.astI2cData[0].u32Data = u32IntTime;
-#else
-    sensor_write_register(0x3012, u32IntTime);
-#endif
+	g_stSnsRegsInfo.astI2cData[0].u32Data = (u32IntTime >> 4) & 0xFF;
+	g_stSnsRegsInfo.astI2cData[1].u32Data = (u32IntTime<<4) & 0xF0;
+
     return;
 }
 
+static const HI_U16 sensor_gain_map[48] = {
+
+	0x10,	0x11,	0x12,	0x13,	0x14,	0x15,	0x16,	0x17,
+	0x18,	0x19,	0x1a,	0x1b,	0x1c,	0x1d,	0x1e,	0x1f,
+	0x30,	0x31,	0x32,	0x33,	0x34,	0x35,	0x36,	0x37,
+	0x38,	0x39,	0x3a,	0x3b,	0x3c,	0x3d,	0x3e,	0x3f,
+	0x70,	0x71,	0x72,	0x73,	0x74,	0x75,	0x76,	0x77,
+	0x78,	0x79,	0x7a,	0x7b,	0x7c,	0x7d,	0x7e,	0x7f
+
+};
+
+static HI_U16 gainmap_gain2index(HI_U16 Gain)
+{
+	HI_U16 i = 0;
+	for(i = 0; i < sizeof(sensor_gain_map)/sizeof(sensor_gain_map[0]); i++){
+		if(sensor_gain_map[i] == Gain){
+			break;
+		}
+	}
+	return i;
+}
+
+static HI_U32 sc1135_Again_limit(HI_U32 Again)
+{
+#define SENSOR_BLC_TOP_VALUE (0x58)
+#define SENSOR_BLC_BOT_VALUE (0x45)
+#define SENSOR_AGAIN_ADAPT_STEP (1)
+#define SENSOR_MAX_AGAIN (0x7f)
+
+	HI_U32 ret_Again;
+	HI_U16 BLC_top = SENSOR_BLC_TOP_VALUE, BLC_bot = SENSOR_BLC_BOT_VALUE, BLC_reg, /*Again_step = SENSOR_AGAIN_ADAPT_STEP,*/ gain_index;
+	static HI_U16 MaxAgain = SENSOR_MAX_AGAIN;
+	BLC_reg = sensor_read_register(0X3911);
+
+	gain_index = gainmap_gain2index(MaxAgain);
+
+	if(BLC_reg > BLC_top){//>0x58
+		if(gain_index>0){
+			//limit max Again by step
+			gain_index -= SENSOR_AGAIN_ADAPT_STEP;
+		}
+		MaxAgain = sensor_gain_map[gain_index];
+	}else if(BLC_reg < BLC_bot){//<0x45
+		//release Again limit by step
+		gain_index += SENSOR_AGAIN_ADAPT_STEP;
+		if(gain_index > sizeof(sensor_gain_map)/sizeof(sensor_gain_map[0])-1){
+			gain_index = sizeof(sensor_gain_map)/sizeof(sensor_gain_map[0]) - 1;
+		}
+		MaxAgain = sensor_gain_map[gain_index];
+	}else{//0x45 < BLC_reg < 0x58
+		//do nothing
+	}
+	ret_Again = Again > MaxAgain ? MaxAgain : Again;
+	//printf("limit gain:ret_Again=%d;Again=%d;MaxAgain=%d\n", ret_Again, Again, MaxAgain);
+	return ret_Again;
+}
+
+
 static HI_VOID cmos_gains_update(HI_U32 u32Again, HI_U32 u32Dgain)
 {
-#if CMOS_AR0130_ISP_WRITE_SENSOR_ENABLE
-    cmos_init_regs_info();
-    
-        if(u32Again >= 2)
-        {
-            g_stSnsRegsInfo.astI2cData[3].u32Data = 0x0004;
-        }
-        else
-        {
-            g_stSnsRegsInfo.astI2cData[3].u32Data = 0x0000;
-        }
-        
-        switch(u32Again)
-        {
-            case 0:
-            case 2:
-                g_stSnsRegsInfo.astI2cData[1].u32Data = 0x1300;
-                break;
-            case 1:
-            case 3:
-                g_stSnsRegsInfo.astI2cData[1].u32Data = 0x1310;
-                break;
-            case 4:
-                g_stSnsRegsInfo.astI2cData[1].u32Data = 0x1320;
-                break;
-            case 5:
-                g_stSnsRegsInfo.astI2cData[1].u32Data = 0x1330;
-                break;
-        }
-        
-        g_stSnsRegsInfo.astI2cData[2].u32Data = u32Dgain;
-    
-        HI_MPI_ISP_SnsRegsCfg(&g_stSnsRegsInfo);
-#else
-        if(u32Again >= 2)
-        {
-            sensor_write_register(0x3100, 0x0004);
-        }
-        else
-        {
-            sensor_write_register(0x3100, 0x0000);
-        }
-        
-        switch(u32Again)
-        {
-            case 0:
-            case 2:
-                sensor_write_register(0x30B0, 0x1300);
-                break;
-            case 1:
-            case 3:
-                sensor_write_register(0x30B0, 0x1310);
-                break;
-            case 4:
-                sensor_write_register(0x30B0, 0x1320);
-                break;
-            case 5:
-                sensor_write_register(0x30B0, 0x1330);
-                break;
-        }
-    
-        sensor_write_register(0x305E, u32Dgain);
-    
-#endif
-        return;
+	HI_U8 u8AgainHigh, u8AgainLow;
+
+	cmos_init_regs_info();
+
+	if (u32Again >= 1 && u32Again < 0x10)
+		u8AgainHigh = 0x0;
+	else if (u32Again >= 0x10 && u32Again < 0x20)
+		u8AgainHigh = 0x1;
+	else if (u32Again >= 0x20 && u32Again < 0x30)
+		u8AgainHigh = 0x3;
+	else if (u32Again >= 0x30 && u32Again < 0x40)
+		u8AgainHigh = 0x7;
+	else
+		u8AgainHigh = 0x0;
+
+	u8AgainLow = u32Again & 0xf;
+
+	g_stSnsRegsInfo.astI2cData[3].u32Data = sc1135_Again_limit((u8AgainHigh<<4) | u8AgainLow);
+
+
+	switch(u32Dgain)
+	{
+	case 0:
+		g_stSnsRegsInfo.astI2cData[2].u32Data = 0;
+		break;
+	case 1:
+		g_stSnsRegsInfo.astI2cData[2].u32Data = 1;
+		break;
+	default:
+		g_stSnsRegsInfo.astI2cData[2].u32Data = 3;
+		break;
+	}
+
+	HI_MPI_ISP_SnsRegsCfg(&g_stSnsRegsInfo);
+
+	return;
 }
 
 static HI_S32 cmos_get_awb_default(AWB_SENSOR_DEFAULT_S *pstAwbSnsDft)
@@ -576,19 +615,19 @@ static HI_S32 cmos_get_awb_default(AWB_SENSOR_DEFAULT_S *pstAwbSnsDft)
 
     memset(pstAwbSnsDft, 0, sizeof(AWB_SENSOR_DEFAULT_S));
 
-    pstAwbSnsDft->u16WbRefTemp = 5000;
+    pstAwbSnsDft->u16WbRefTemp = 4850;
 
     pstAwbSnsDft->au16GainOffset[0] = 0x018b;
     pstAwbSnsDft->au16GainOffset[1] = 0x100;
     pstAwbSnsDft->au16GainOffset[2] = 0x100;
-    pstAwbSnsDft->au16GainOffset[3] = 0x01a7;
-
-    pstAwbSnsDft->as32WbPara[0] = 86;
-    pstAwbSnsDft->as32WbPara[1] = -16;
-    pstAwbSnsDft->as32WbPara[2] = -182;
-    pstAwbSnsDft->as32WbPara[3] = 243836;
-    pstAwbSnsDft->as32WbPara[4] = 128;
-    pstAwbSnsDft->as32WbPara[5] = -195566;
+    pstAwbSnsDft->au16GainOffset[3] = 0x171;
+
+	pstAwbSnsDft->as32WbPara[0] = 104;
+	pstAwbSnsDft->as32WbPara[1] = 9;
+	pstAwbSnsDft->as32WbPara[2] = -143;
+	pstAwbSnsDft->as32WbPara[3] = 188843;
+	pstAwbSnsDft->as32WbPara[4] = 128;
+	pstAwbSnsDft->as32WbPara[5] = -140071;
 
     memcpy(&pstAwbSnsDft->stCcm, &g_stAwbCcm, sizeof(AWB_CCM_S));
     memcpy(&pstAwbSnsDft->stAgcTbl, &g_stAwbAgcTable, sizeof(AWB_AGC_TABLE_S));
diff --git a/mpp2/component/isp2/sensor/aptina_ar0130/ar0130_sensor_ctl.c b/mpp2/component/isp2/sensor/aptina_ar0130/ar0130_sensor_ctl.c
index 7678799..36def45 100644
--- a/mpp2/component/isp2/sensor/aptina_ar0130/ar0130_sensor_ctl.c
+++ b/mpp2/component/isp2/sensor/aptina_ar0130/ar0130_sensor_ctl.c
@@ -12,9 +12,9 @@
 #include "hi_i2c.h"
 #endif
 
-const unsigned char sensor_i2c_addr	=	0x20;		/* I2C Address of AR0130 */
+const unsigned char sensor_i2c_addr	=	0x60;		/* I2C Address of AR0130 */
 const unsigned int  sensor_addr_byte	=	2;
-const unsigned int  sensor_data_byte	=	2;
+const unsigned int  sensor_data_byte	=	1;
 
 int sensor_read_register(int addr)
 {
@@ -108,297 +108,160 @@ void sensor_prog(int* rom)
 
 void sensor_init()
 {
-//[720p30]
-#if 0	
-    sensor_write_register(0x301A, 0x0001);  // RESET_REGISTER
-    sensor_write_register(0x301A, 0x10D8);  // RESET_REGISTER
-    
-    delay_ms(200);  //DELAY= 200
-    
-    sensor_write_register(0x3088, 0x8000);  // SEQ_CTRL_PORT
-    sensor_write_register(0x3086, 0x0225);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x5050);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2D26);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0828);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0D17);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0926);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0028);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0526);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0xA728);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0725);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x8080);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2917);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0525);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0040);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2702);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1616);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2706);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1736);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x26A6);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1703);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x26A4);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x171F);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2805);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2620);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2804);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2520);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2027);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0017);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1E25);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0020);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2117);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1028);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x051B);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1703);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2706);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1703);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1741);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2660);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x17AE);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2500);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x9027);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0026);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1828);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x002E);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2A28);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x081E);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0831);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1440);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x4014);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2020);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1410);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1034);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1400);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1014);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0020);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1400);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x4013);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1802);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1470);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x7004);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1470);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x7003);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1470);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x7017);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2002);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1400);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2002);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1400);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x5004);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1400);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2004);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x1400);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x5022);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0314);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0020);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0314);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x0050);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2C2C);  // SEQ_DATA_PORT
-    sensor_write_register(0x3086, 0x2C2C);  // SEQ_DATA_PORT
-    sensor_write_register(0x309E, 0x0000);  // ERS_PROG_START_ADDR
-    
-    delay_ms(200);  //DELAY= 200
-    
-    sensor_write_register(0x30E4, 0x6372);  // ADC_BITS_6_7
-    sensor_write_register(0x30E2, 0x7253);  // ADC_BITS_4_5
-    sensor_write_register(0x30E0, 0x5470);  // ADC_BITS_2_3
-    sensor_write_register(0x30E6, 0xC4CC);  // ADC_CONFIG1
-    sensor_write_register(0x30E8, 0x8050);  // ADC_CONFIG2
-    sensor_write_register(0x3082, 0x0029);  // OPERATION_MODE_CTRL
-    sensor_write_register(0x30B0, 0x1300);  // DIGITAL_TEST
-    sensor_write_register(0x30D4, 0xE007);  // COLUMN_CORRECTION
-    sensor_write_register(0x301A, 0x10DC);  // RESET_REGISTER
-    sensor_write_register(0x301A, 0x10D8);  // RESET_REGISTER
-    sensor_write_register(0x3044, 0x0400);  // DARK_CONTROL
-    sensor_write_register(0x3EDA, 0x0F03);  // DAC_LD_14_15
-    sensor_write_register(0x3ED8, 0x01EF);  // DAC_LD_12_13
-    sensor_write_register(0x3012, 0x02A0);  // COARSE_INTEGRATION_TIME
-    sensor_write_register(0x3032, 0x0000);  // DIGITAL_BINNING
-    sensor_write_register(0x3002, 0x003e);  // Y_ADDR_START
-    sensor_write_register(0x3004, 0x0004);  // X_ADDR_START
-    sensor_write_register(0x3006, 0x030d);  // Y_ADDR_END
-    sensor_write_register(0x3008, 0x0503);  // X_ADDR_END
-    sensor_write_register(0x300A, 0x02EE);  // FRAME_LENGTH_LINES
-    sensor_write_register(0x300C, 0x0CE4);  // LINE_LENGTH_PCK
-    sensor_write_register(0x301A, 0x10D8);  // RESET_REGISTER
-    sensor_write_register(0x31D0, 0x0001);  // HDR_COMP
-
-    //Load = PLL Enabled 27Mhz to 74.25Mhz
-    sensor_write_register(0x302C, 0x0002);  // VT_SYS_CLK_DIV
-    sensor_write_register(0x302A, 0x0004);  // VT_PIX_CLK_DIV
-    sensor_write_register(0x302E, 0x0002);  // PRE_PLL_CLK_DIV
-    sensor_write_register(0x3030, 0x002C);  // PLL_MULTIPLIER
-    sensor_write_register(0x30B0, 0x0000);  // DIGITAL_TEST 
-    delay_ms(100);  //DELAY= 100
-#endif
-    sensor_write_register( 0x301A, 0x0001 );    // RESET_REGISTER
-    delay_ms(200); //ms
-    sensor_write_register( 0x301A, 0x10D8 );    // RESET_REGISTER
-    delay_ms(200); //ms
-    //Linear Mode Setup
-    //AR0130 Rev1 Linear sequencer load  8-2-2011
-    sensor_write_register( 0x3088, 0x8000 );// SEQ_CTRL_PORT
-    sensor_write_register( 0x3086, 0x0225 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x5050 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2D26 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0828 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0D17 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0926 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0028 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0526 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0xA728 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0725 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x8080 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2917 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0525 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0040 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2702 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1616 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2706 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1736 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x26A6 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1703 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x26A4 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x171F );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2805 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2620 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2804 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2520 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2027 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0017 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1E25 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0020 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2117 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1028 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x051B );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1703 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2706 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1703 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1747 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2660 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x17AE );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2500 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x9027 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0026 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1828 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x002E );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2A28 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x081E );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0831 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1440 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x4014 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2020 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1410 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1034 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1400 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1014 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0020 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1400 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x4013 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1802 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1470 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x7004 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1470 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x7003 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1470 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x7017 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2002 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1400 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2002 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1400 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x5004 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1400 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2004 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x1400 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x5022 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0314 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0020 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0314 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x0050 );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2C2C );// SEQ_DATA_PORT
-    sensor_write_register( 0x3086, 0x2C2C );// SEQ_DATA_PORT
-    sensor_write_register( 0x309E, 0x0000 );// DCDS_PROG_START_ADDR
-    sensor_write_register( 0x30E4, 0x6372 );// ADC_BITS_6_7
-    sensor_write_register( 0x30E2, 0x7253 );// ADC_BITS_4_5
-    sensor_write_register( 0x30E0, 0x5470 );// ADC_BITS_2_3
-    sensor_write_register( 0x30E6, 0xC4CC );// ADC_CONFIG1
-    sensor_write_register( 0x30E8, 0x8050 );// ADC_CONFIG2
-    delay_ms(200); //ms
-    sensor_write_register( 0x3082, 0x0029 );    // OPERATION_MODE_CTRL
-    //AR0130 Rev1 Optimized settings
-    sensor_write_register( 0x301E, 0x00C8); // DATA_PEDESTAL
-    sensor_write_register( 0x3EDA, 0x0F03); // DAC_LD_14_15
-    sensor_write_register( 0x3EDE, 0xC005); // DAC_LD_18_19
-    sensor_write_register( 0x3ED8, 0x09EF); // DAC_LD_12_13
-    sensor_write_register( 0x3EE2, 0xA46B); // DAC_LD_22_23
-    sensor_write_register( 0x3EE0, 0x047D); // DAC_LD_20_21
-    sensor_write_register( 0x3EDC, 0x0070); // DAC_LD_16_17
-    sensor_write_register( 0x3044, 0x0404); // DARK_CONTROL
-    sensor_write_register( 0x3EE6, 0x8303); // DAC_LD_26_27
-    sensor_write_register( 0x3EE4, 0xD208); // DAC_LD_24_25
-    sensor_write_register( 0x3ED6, 0x00BD); // DAC_LD_10_11
-    sensor_write_register( 0x30B0, 0x1300); // DIGITAL_TEST
-    sensor_write_register( 0x30D4, 0xE007); // COLUMN_CORRECTION
-    sensor_write_register( 0x301A, 0x10DC); // RESET_REGISTER
-    delay_ms(500 );//ms                 
-    sensor_write_register( 0x301A, 0x10D8); // RESET_REGISTER
-    delay_ms(500); //ms                   
-    sensor_write_register( 0x3044, 0x0400); // DARK_CONTROL
-                                    
-    sensor_write_register( 0x3012, 0x02A0); // COARSE_INTEGRATION_TIME
+	sensor_write_register(0x3000,0x01);//manualstreamenbale
+	sensor_write_register(0x3003,0x01);//softreset
+	sensor_write_register(0x3400,0x53);
+	sensor_write_register(0x3416,0xc0);
+	sensor_write_register(0x3d08,0x00);
+	sensor_write_register(0x3e03,0x03);
+	sensor_write_register(0x3928,0x00);
+	sensor_write_register(0x3630,0x58);
+	sensor_write_register(0x3612,0x00);
+	sensor_write_register(0x3632,0x41);
+	sensor_write_register(0x3635,0x00); //20160328
+	sensor_write_register(0x3620,0x44);
+	sensor_write_register(0x3633,0x7f); //20160422
+	sensor_write_register(0x3780,0x0b);
+	sensor_write_register(0x3300,0x33);
+	sensor_write_register(0x3301,0x38);
+	sensor_write_register(0x3302,0x30);
+	sensor_write_register(0x3303,0x80); //20160307B  20160412
+	sensor_write_register(0x3304,0x18);
+	sensor_write_register(0x3305,0x72);
+	sensor_write_register(0x331e,0x30); //20160512
+	sensor_write_register(0x321e,0x00);
+	sensor_write_register(0x321f,0x0a);
+	sensor_write_register(0x3216,0x0a);
+	sensor_write_register(0x3332,0x38);
+	sensor_write_register(0x5054,0x82);
+	sensor_write_register(0x3622,0x26);
+	sensor_write_register(0x3907,0x02);
+	sensor_write_register(0x3908,0x00);
+	sensor_write_register(0x3601,0x1a); //20160422
+	sensor_write_register(0x3315,0x44);
+	sensor_write_register(0x3308,0x40);
+	sensor_write_register(0x3223,0x22);//vysncmode[5]
+	sensor_write_register(0x3e0e,0x50);
+	/*DPC*/
+	sensor_write_register(0x3211,0x60);
+	sensor_write_register(0x5780,0xff);
+	sensor_write_register(0x5781,0x04); //20160328
+	sensor_write_register(0x5785,0x0c); //20160328
+	sensor_write_register(0x5000,0x66);
 
-    
-    //720p 30fps Setup                   
-    sensor_write_register( 0x3032, 0x0000); // DIGITAL_BINNING
-    sensor_write_register( 0x3002, 0x0002); // Y_ADDR_START
-    sensor_write_register( 0x3004, 0x0000); // X_ADDR_START
-    sensor_write_register( 0x3006, 0x02D1);//Row End (A) = 721
-    sensor_write_register( 0x3008, 0x04FF);//Column End (A) = 1279
-    sensor_write_register( 0x300A, 0x02EA);//Frame Lines (A) = 746
-    sensor_write_register( 0x300C, 0x08ba);
-    sensor_write_register( 0x3012, 0x0133);//Coarse_IT_Time (A) = 307
-    sensor_write_register( 0x306e, 0x9211);//Coarse_IT_Time (A) = 307
-
-
-    //Enable Parallel Mode
-    sensor_write_register( 0x301A, 0x10D8); // RESET_REGISTER
-    sensor_write_register( 0x31D0, 0x0001); // HDR_COMP
-    
-    //PLL Enabled 27Mhz to 50Mhz
-    sensor_write_register( 0x302A, 0x0009 );//VT_PIX_CLK_DIV = 9
-    sensor_write_register( 0x302C, 0x0001 );//VT_SYS_CLK_DIV = 1
-    sensor_write_register( 0x302E, 0x0003 );//PRE_PLL_CLK_DIV = 3
-    sensor_write_register( 0x3030, 0x0032 );//PLL_MULTIPLIER = 50
-    sensor_write_register( 0x30B0, 0x1300 );    // DIGITAL_TEST
-    delay_ms(100); //ms
-    sensor_write_register( 0x301A, 0x10DC );    // RESET_REGISTER
-    sensor_write_register( 0x301A, 0x10DC );    // RESET_REGISTER
-                                          
-    //exposure                            
-    sensor_write_register( 0x3012, 0x0671 );    // COARSE_INTEGRATION_TIME
-    sensor_write_register( 0x30B0, 0x1330 );    // DIGITAL_TEST
-    sensor_write_register( 0x3056, 0x003B );    // GREEN1_GAIN
-    sensor_write_register( 0x305C, 0x003B );    // GREEN2_GAIN
-    sensor_write_register( 0x305A, 0x003B );    // RED_GAIN
-    sensor_write_register( 0x3058, 0x003B );    // BLUE_GAIN
-    //High Conversion gain                
-    sensor_write_register( 0x3100, 0x0004 );    // AE_CTRL_REG
+	sensor_write_register(0x3e0f,0x90);
+	sensor_write_register(0x3631,0x80);
+	sensor_write_register(0x3310,0x83);
+	sensor_write_register(0x3336,0x01);
+	sensor_write_register(0x3337,0x00);
+	sensor_write_register(0x3338,0x03);
+	sensor_write_register(0x3339,0xe8);
+	sensor_write_register(0x3335,0x06); //20160418
+	sensor_write_register(0x3880,0x00);
+
+	//power reduction 20160606
+	sensor_write_register(0x3620,0x42);
+	sensor_write_register(0x3610,0x03);
+	sensor_write_register(0x3600,0x64);
+	sensor_write_register(0x3636,0x0d);
+	sensor_write_register(0x3323,0x80);
+	//io strength
+	//sensor_write_register(0x3640,0x03);
+
+#if 0
+	//960 p
+	/*27Minput54Moutputpixelclockfrequency*/
+	sensor_write_register(0x3010,0x07);
+	sensor_write_register(0x3011,0x46);
+	sensor_write_register(0x3004,0x04);
+	//  sensor_write_register(0x3610,0x2b);  //20160606
+
+	/*configFramelengthandwidth*/
+	sensor_write_register(0x320c,0x07); //1800
+	sensor_write_register(0x320d,0x08); //1000
+	sensor_write_register(0x320e,0x03);
+	sensor_write_register(0x320f,0xe8);
 
+	/*configOutputwindowposition*/
+	sensor_write_register(0x3210,0x00);
+	sensor_write_register(0x3211,0x60);
+	sensor_write_register(0x3212,0x00);
+	sensor_write_register(0x3213,0x04); //for BGGR out format 20160412
 
-    //LOAD= Disable Embedded Data and Stats
-    sensor_write_register(0x3064, 0x1802);  // SMIA_TEST, EMBEDDED_STATS_EN, 0x0000
-    sensor_write_register(0x3064, 0x1802);  // SMIA_TEST, EMBEDDED_DATA, 0x0000 
+	/*configOutputimagesize*/
+	sensor_write_register(0x3208,0x05);
+	sensor_write_register(0x3209,0x00);
+	sensor_write_register(0x320a,0x03);
+	sensor_write_register(0x320b,0xc0);
 
-    sensor_write_register(0x30BA, 0x0008);       //20120502
+	/*configFramestartphysicalposition*/
+	sensor_write_register(0x3202,0x00);
+	sensor_write_register(0x3203,0x08);
+	sensor_write_register(0x3206,0x03);
+	sensor_write_register(0x3207,0xcf);
 
-    sensor_write_register(0x3EE4, 0xD308);  //the default value former is 0xd208
+	/*powerconsumptionreduction*/
+	sensor_write_register(0x3330,0x0d);
+	sensor_write_register(0x3320,0x06);
+	sensor_write_register(0x3321,0xd8);
+	sensor_write_register(0x3322,0x01);
+	//  sensor_write_register(0x3323,0x80); //20160606
+	//  sensor_write_register(0x3600,0x54); //20160606
 
-    sensor_write_register(0x301A, 0x10DC);  // RESET_REGISTER
+	printf("SC1135 960p 30fps sensor init OK!\n");
+
+#else
+
+	//720p
+	/*27Minput54Moutputpixelclockfrequency*/
+	sensor_write_register(0x3010,0x07);
+	sensor_write_register(0x3011,0x46);
+	sensor_write_register(0x3004,0x04);
+	//  sensor_write_register(0x3610,0x2b); //201600606
+
+	/*configFramelengthandwidth*/
+	sensor_write_register(0x320c,0x07); //1800
+	sensor_write_register(0x320d,0x08); //1000
+	sensor_write_register(0x320e,0x03);
+	sensor_write_register(0x320f,0xe8);
+
+	/*configOutputwindowposition*/
+	sensor_write_register(0x3210,0x00);
+	sensor_write_register(0x3211,0x60);
+	sensor_write_register(0x3212,0x00);
+	sensor_write_register(0x3213,0x80);  //for BGGR out format 20160412
+
+	/*configOutputimagesize*/
+	sensor_write_register(0x3208,0x05);
+	sensor_write_register(0x3209,0x00);
+	sensor_write_register(0x320a,0x02);
+	sensor_write_register(0x320b,0xd0);
+
+	/*configFramestartphysicalposition*/
+	sensor_write_register(0x3202,0x00);
+	sensor_write_register(0x3203,0x08);
+	sensor_write_register(0x3206,0x03);
+	sensor_write_register(0x3207,0xcf);
+
+	/*powerconsumptionreduction*/
+	sensor_write_register(0x3330,0x0d);
+	sensor_write_register(0x3320,0x06);
+	sensor_write_register(0x3321,0xd8);
+	sensor_write_register(0x3322,0x01);
+	// sensor_write_register(0x3323,0x80); //20160606
+	// sensor_write_register(0x3600,0x54); //20160606
+
+	printf("SC1135 720p 30fps sensor init OK!~~~~~~~~~~~~~~~~\n");
+#endif
 
-    delay_ms(200);  //DELAY= 200
+	//bSensorInit = HI_TRUE;
+	printf("=========================================================\n");
+	printf("============= SC1135v1 sensor init success! =============\n");
+	printf("=========================================================\n");
 
+	//sensor_write_register(0x503d,0x008);
 
-    printf("Aptina AR0130 sensor 720P30fps init success!\n");
+	return;
     
 }
 
diff --git a/mpp2/component/isp2/sensor/smartsens_sc1135/Makefile b/mpp2/component/isp2/sensor/smartsens_sc1135/Makefile
new file mode 100644
index 0000000..dbabfd2
--- /dev/null
+++ b/mpp2/component/isp2/sensor/smartsens_sc1135/Makefile
@@ -0,0 +1,75 @@
+#
+# sensor lib Makefile
+#
+
+ifeq ($(PARAM_FILE), )
+	PARAM_FILE:=../../../../Makefile.param
+	include $(PARAM_FILE)
+endif
+
+ISP_PATH := $(MPP_PATH)/component/isp2
+EXT_PATH := $(MPP_PATH)/$(EXTDRV)
+3A_PATH  := $(ISP_PATH)/3a
+LIBPATH = $(ISP_PATH)/lib
+OBJPATH = ./obj
+
+ifeq ($(CONFIG_GPIO_I2C),y)
+HI_GPIO_I2C:=HI_GPIO_I2C
+else
+HI_GPIO_I2C:=HI_GPIO_XXX
+endif
+
+ARFLAGS = rcv
+ARFLAGS_SO = $(TARGET_ARFLAGS_SO)
+ARFLAGS_SO += -shared -fPIC -o
+CFLAGS  = -Wall -fPIC -D$(HI_FPGA) -D$(HI_GPIO_I2C)
+CFLAGS  += -O2
+CFLAGS  += $(TARGET_CFLAGS)
+
+ifeq ($(ISP_INI_CONFIG), y)
+CFLAGS += -D INIFILE_CONFIG_MODE
+endif
+
+ifeq ($(HIGDB),HI_GDB)
+CFLAGS += -g
+endif
+
+ifeq ($(CONFIG_JPEGEDCF), y)
+     CFLAGS += -D ENABLE_JPEGEDCF 
+endif
+BUS_DIR := $(EXT_PATH)/ssp-sony/
+
+ISP_INC := $(ISP_PATH)/include
+3A_INC := $(3A_PATH)/include
+INC := -I$(BUS_DIR) -I$(REL_INC) -I$(ISP_INC) -I$(3A_INC) -I$(ISP_PATH)/iniparser 
+
+ifeq ($(CONFIG_GPIO_I2C), y)
+    INC += -I$(EXT_PATH)/gpio-i2c-ex
+    INC += -I$(EXT_PATH)/gpio-i2c
+else
+    INC += -I$(EXT_PATH)/i2c
+    INC += -I$(EXT_PATH)/hi_i2c
+endif
+
+COMPILE = $(CC) $(CFLAGS) $(DFLAGS) -lm
+
+$(OBJPATH)/%.o: ./%.c 
+	@[ -e $(LIBPATH) ] || mkdir $(LIBPATH)
+	@[ -e $(OBJPATH) ] || mkdir $(OBJPATH)
+	@$(COMPILE) -o $@ -c $< $(INC) 
+
+SRCS = $(wildcard ./*.c)
+OBJS = $(SRCS:%.c=%.o)
+OBJS := $(OBJS:./%=obj/%)
+
+TARGETLIB := $(LIBPATH)/libsns_sc1135.a
+TARGETLIB_SO := $(LIBPATH)/libsns_sc1135.so
+
+all:$(TARGETLIB)
+$(TARGETLIB):$(OBJS)
+	($(AR) $(ARFLAGS) $(TARGETLIB) $(OBJS))
+	($(CC) $(ARFLAGS_SO) $(TARGETLIB_SO) $(OBJS))
+
+clean:
+	@$(RM) -rf $(TARGETLIB) $(OBJS)
+	@$(RM) -rf $(LIBPATH) $(OBJPATH)
diff --git a/mpp2/component/isp2/sensor/smartsens_sc1135/sc1135_cmos.c b/mpp2/component/isp2/sensor/smartsens_sc1135/sc1135_cmos.c
new file mode 100644
index 0000000..5964694
--- /dev/null
+++ b/mpp2/component/isp2/sensor/smartsens_sc1135/sc1135_cmos.c
@@ -0,0 +1,1450 @@
+#if !defined(__SC1135_CMOS_H_)
+#define __SC1135_CMOS_H_
+
+#include <stdio.h>
+#include <string.h>
+#include <assert.h>
+#include "hi_comm_sns.h"
+#include "hi_comm_video.h"
+#include "hi_sns_ctrl.h"
+#include "mpi_isp.h"
+#include "mpi_ae.h"
+#include "mpi_awb.h"
+#include "mpi_af.h"
+
+#ifdef __cplusplus
+#if __cplusplus
+extern "C"{
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+
+#define SC1135_ID 1135
+
+#define CMOS_SC1135_ISP_WRITE_SENSOR_ENABLE (1)
+#define FULL_LINES_MAX  (0xFFFF)
+
+
+/* To change the mode of config. ifndef INIFILE_CONFIG_MODE, quick config mode.*/
+/* else, cmos_cfg.ini file config mode*/
+#ifdef INIFILE_CONFIG_MODE
+
+extern AE_SENSOR_DEFAULT_S  g_AeDft[];
+extern AWB_SENSOR_DEFAULT_S g_AwbDft[];
+extern ISP_CMOS_DEFAULT_S   g_IspDft[];
+extern HI_S32 Cmos_LoadINIPara(const HI_CHAR *pcName);
+#else
+
+#endif
+
+/****************************************************************************
+ * local variables                                                            *
+ ****************************************************************************/
+
+extern const unsigned int sensor_i2c_addr;
+extern unsigned int sensor_addr_byte;
+extern unsigned int sensor_data_byte;
+
+#define VMAX_ADDR_H              (0x320e)
+#define VMAX_ADDR_L              (0x320f)
+
+#define SENSOR_720P_30FPS_MODE  (1)
+
+#define INCREASE_LINES (0) /* make real fps less than stand fps because NVR require*/
+#define VMAX_720P30_LINEAR     (1000+INCREASE_LINES)
+#define CMOS_SC1135_SLOW_FRAMERATE_MODE (0)
+
+
+HI_U8 gu8SensorImageMode = SENSOR_720P_30FPS_MODE;
+ISP_WDR_MODE_E genSensorMode = ISP_WDR_BUTT;
+
+static HI_U32 gu32FullLinesStd = VMAX_720P30_LINEAR;
+static HI_U32 gu32FullLines = VMAX_720P30_LINEAR;
+
+static HI_BOOL bInit = HI_FALSE;
+HI_BOOL bSensorInit = HI_FALSE;
+ISP_SNS_REGS_INFO_S g_stSnsRegsInfo = {0};
+//ISP_SNS_REGS_INFO_S g_stPreSnsRegsInfo = {0};
+static HI_U8 gu8Fps = 30;
+
+HI_U32 cmos_get_sns_regs_info(ISP_SNS_REGS_INFO_S *pstSnsRegsInfo);
+
+
+/* AE default parameter and function */
+static HI_S32 cmos_get_ae_default(AE_SENSOR_DEFAULT_S *pstAeSnsDft)
+{
+	if (HI_NULL == pstAeSnsDft)
+	{
+		printf("null pointer when get ae default value!\n");
+		return -1;
+	}
+
+	pstAeSnsDft->u32LinesPer500ms = gu32FullLinesStd*30/2;
+	pstAeSnsDft->u32FullLinesStd = gu32FullLinesStd;
+	pstAeSnsDft->u32FlickerFreq = 0;
+	//pstAeSnsDft->u32FullLinesMax = FULL_LINES_MAX;
+
+	pstAeSnsDft->au8HistThresh[0] = 0xd;
+	pstAeSnsDft->au8HistThresh[1] = 0x28;
+	pstAeSnsDft->au8HistThresh[2] = 0x60;
+	pstAeSnsDft->au8HistThresh[3] = 0x80;
+
+	pstAeSnsDft->u8AeCompensation = 0x2b;
+
+	pstAeSnsDft->stIntTimeAccu.enAccuType = AE_ACCURACY_LINEAR;
+	pstAeSnsDft->stIntTimeAccu.f32Accuracy = 1;
+	//pstAeSnsDft->stIntTimeAccu.f32Offset = 0;
+	pstAeSnsDft->u32MaxIntTime = gu32FullLinesStd - 4;
+	pstAeSnsDft->u32MinIntTime = 1;
+	pstAeSnsDft->u32MaxIntTimeTarget = pstAeSnsDft->u32MaxIntTime;
+	pstAeSnsDft->u32MinIntTimeTarget = pstAeSnsDft->u32MinIntTime;
+
+	pstAeSnsDft->stAgainAccu.enAccuType = AE_ACCURACY_TABLE;
+	pstAeSnsDft->stAgainAccu.f32Accuracy = 0.0625;
+	pstAeSnsDft->u32MaxAgain = 15400;  //62倍
+	pstAeSnsDft->u32MinAgain = 1024;
+	pstAeSnsDft->u32MaxAgainTarget = 15400;
+	pstAeSnsDft->u32MinAgainTarget = 1024;
+
+	pstAeSnsDft->stDgainAccu.enAccuType = AE_ACCURACY_TABLE;
+	pstAeSnsDft->stDgainAccu.f32Accuracy = 0.0625;//invalidate
+	pstAeSnsDft->u32MaxDgain = 4096;
+	pstAeSnsDft->u32MinDgain = 1024;
+	pstAeSnsDft->u32MaxDgainTarget = 4096;
+	pstAeSnsDft->u32MinDgainTarget = 1024;
+
+	pstAeSnsDft->u32ISPDgainShift = 8;
+	pstAeSnsDft->u32MinISPDgainTarget = 1 << pstAeSnsDft->u32ISPDgainShift;
+	pstAeSnsDft->u32MaxISPDgainTarget = 4 << pstAeSnsDft->u32ISPDgainShift;
+
+	pstAeSnsDft->u32LinesPer500ms = gu32FullLinesStd*30/2;
+
+	return 0;
+}
+
+/* the function of sensor set fps */
+static HI_VOID cmos_fps_set(HI_U8 u8Fps, AE_SENSOR_DEFAULT_S *pstAeSnsDft)
+{
+
+	HI_U32 u32VblankingLines = 0xFFFF;
+	if ((u8Fps <= 30) && (u8Fps >= 1))
+	{
+		if(SENSOR_720P_30FPS_MODE == gu8SensorImageMode)
+		{
+			u32VblankingLines = VMAX_720P30_LINEAR * 30 / u8Fps;
+		}
+	}
+	else
+	{
+		printf("Not support Fps: %d\n", u8Fps);
+		return;
+	}
+
+	gu32FullLinesStd = gu32FullLinesStd > FULL_LINES_MAX ? FULL_LINES_MAX : gu32FullLinesStd;
+
+#if CMOS_SC1135_ISP_WRITE_SENSOR_ENABLE
+	g_stSnsRegsInfo.astI2cData[4].u32Data = (u32VblankingLines >> 8) & 0xFF ;
+	g_stSnsRegsInfo.astI2cData[5].u32Data = u32VblankingLines & 0xFF;
+#else
+	sensor_write_register(0x320e, (u32VblankingLines >> 8) & 0xff) ;
+	sensor_write_register(0x320f, u32VblankingLines & 0xff);
+#endif
+
+	//pstAeSnsDft->f32Fps = u8Fps;
+	pstAeSnsDft->u32MaxIntTime = u32VblankingLines - 4;
+	gu32FullLinesStd = u32VblankingLines;
+	gu8Fps = u8Fps;
+	pstAeSnsDft->u32LinesPer500ms = gu32FullLinesStd * 30 / 2;
+	pstAeSnsDft->u32FullLinesStd = gu32FullLinesStd;
+
+	return;
+}
+
+
+static HI_VOID cmos_slow_framerate_set(HI_U16 u16FullLines,
+		AE_SENSOR_DEFAULT_S *pstAeSnsDft)
+{
+	gu32FullLines = u16FullLines;
+
+#if CMOS_SC1135_ISP_WRITE_SENSOR_ENABLE
+	g_stSnsRegsInfo.astI2cData[4].u32Data = (u16FullLines >> 8) & 0xFF;
+	g_stSnsRegsInfo.astI2cData[5].u32Data = u16FullLines & 0xFf;
+#else
+	sensor_write_register(0x320e, ((u16FullLines >> 8) & 0xFF));
+	sensor_write_register(0x320f, u16FullLines & 0xFf);
+#endif
+
+	pstAeSnsDft->u32MaxIntTime = gu32FullLines - 4;
+
+#if 1
+	HI_U16 u16Temp = u16FullLines - 0x2e8;
+	sensor_write_register(0x3336, (u16Temp>>8)&0xff);
+	sensor_write_register(0x3337, u16Temp&0xff);
+
+	sensor_write_register(0x3338, (u16FullLines>>8)&0xff);
+	sensor_write_register(0x3339, u16FullLines&0xff);
+
+	HI_U16 u16RegH = 0, u16RegL = 0;
+	u16RegH = sensor_read_register(0x320c);
+	u16RegL = sensor_read_register(0x320d);
+
+	u16Temp = (u16RegH<<8) | u16RegL;
+	u16Temp -= 0x20;
+
+	sensor_write_register(0x3320, (u16Temp>>8)&0xff);
+	sensor_write_register(0x3321, u16Temp&0xff);
+
+#endif
+
+	return;
+}
+
+
+
+static const HI_U16 sensor_gain_map[48] = {
+
+	0x10,	0x11,	0x12,	0x13,	0x14,	0x15,	0x16,	0x17,
+	0x18,	0x19,	0x1a,	0x1b,	0x1c,	0x1d,	0x1e,	0x1f,
+	0x30,	0x31,	0x32,	0x33,	0x34,	0x35,	0x36,	0x37,
+	0x38,	0x39,	0x3a,	0x3b,	0x3c,	0x3d,	0x3e,	0x3f,
+	0x70,	0x71,	0x72,	0x73,	0x74,	0x75,	0x76,	0x77,
+	0x78,	0x79,	0x7a,	0x7b,	0x7c,	0x7d,	0x7e,	0x7f
+
+};
+
+static HI_U16 gainmap_gain2index(HI_U16 Gain)
+{
+	HI_U16 i = 0;
+	for(i = 0; i < sizeof(sensor_gain_map)/sizeof(sensor_gain_map[0]); i++){
+		if(sensor_gain_map[i] == Gain){
+			break;
+		}
+	}
+	return i;
+}
+
+/* while isp notify ae to update sensor regs, ae call these funcs. */
+static HI_VOID cmos_inttime_update(HI_U32 u32IntTime)
+{
+
+
+#if 0
+	if (u32OldIntTime != u32IntTime)
+	{
+		printf("u32IntTime:%#x...........%#x........%#x..\n",u32IntTime, (u32IntTime >> 4) & 0xFF,(u32IntTime<<4) & 0xF0);
+		u32OldIntTime = u32IntTime;
+	}
+#endif
+
+#if CMOS_SC1135_ISP_WRITE_SENSOR_ENABLE
+	cmos_get_sns_regs_info(&g_stSnsRegsInfo);
+	g_stSnsRegsInfo.astI2cData[0].u32Data = (u32IntTime >> 4) & 0xFF;
+	g_stSnsRegsInfo.astI2cData[1].u32Data = (u32IntTime<<4) & 0xF0;
+#else
+	sensor_write_register(0x3e01, ((u32IntTime >> 4) & 0xFF));
+	sensor_write_register(0x3e02, (u32IntTime<<4) & 0xF0);
+#endif
+
+	return;
+}
+
+
+
+static  HI_U32   analog_gain_table[64] =
+{
+
+	1024,	1085,	1146,	1208,	1269,	1321,	1382,	1444,	1505,	1566,	1628,	1690,	1751,	1802,	1864,	1925,
+	2048,	2170,	2292,	2416,	2538,	2642,	2764,	2888,	3010,	3132,	3256,	3380,	3502,	3604,	3728,	3850,
+	4096,	4340,	4584,	4832,	5076,	5284,	5528,	5776,	6020,	6264,	6512,	6760,	7004,	7208,	7456,	7700,
+	8192,	8680,	9168,	9664,	10152,	10568,	11056,	11552,	12040,	12528,	13024,	13520,	14008,	14416,	14912,	15400
+};
+
+static  HI_U32   digital_gain_table[3] =
+{
+	1024,2048,4096
+};
+
+
+
+//static HI_VOID cmos_again_calc_table(HI_U32 *pu32AgainLin, HI_U32 *pu32AgainDb)
+static HI_VOID cmos_again_calc_table(HI_U32 u32InTimes,AE_SENSOR_GAININFO_S *pstAeSnsGainInfo)
+{
+	int i;
+
+    if(HI_NULL == pstAeSnsGainInfo)
+    {
+        printf("null pointer when get ae sensor gain info  value!\n");
+        return;
+    }
+
+
+	if (u32InTimes >= analog_gain_table[63])
+	{
+		pstAeSnsGainInfo->u32SnsTimes = analog_gain_table[63];
+		pstAeSnsGainInfo->u32GainDb = 63;
+		return ;
+	}
+
+	for (i = 1; i < 64; i++)
+	{
+		if (u32InTimes < analog_gain_table[i])
+		{
+			pstAeSnsGainInfo->u32SnsTimes = analog_gain_table[i - 1];
+			pstAeSnsGainInfo->u32GainDb = i - 1;
+			break;
+		}
+	}
+
+	return;
+}
+
+//static HI_VOID cmos_dgain_calc_table(HI_U32 *pu32DgainLin, HI_U32 *pu32DgainDb)
+static HI_VOID cmos_dgain_calc_table(HI_U32 u32InTimes,AE_SENSOR_GAININFO_S *pstAeSnsGainInfo)
+{
+	int i;
+
+    if(HI_NULL == pstAeSnsGainInfo)
+    {
+        printf("null pointer when get ae sensor gain info  value!\n");
+        return;
+    }
+
+	if (u32InTimes >= digital_gain_table[2])
+	{
+		pstAeSnsGainInfo->u32SnsTimes = digital_gain_table[2];
+		pstAeSnsGainInfo->u32GainDb = 2;
+		return ;
+	}
+
+	for (i = 1; i < 3; i++)
+	{
+		if (u32InTimes < digital_gain_table[i])
+		{
+			pstAeSnsGainInfo->u32SnsTimes = digital_gain_table[i - 1];
+			pstAeSnsGainInfo->u32GainDb = i - 1;
+			break;
+		}
+	}
+
+	return;
+}
+
+
+static HI_U32 sc1135_Again_limit(HI_U32 Again)
+{
+#define SENSOR_BLC_TOP_VALUE (0x58)
+#define SENSOR_BLC_BOT_VALUE (0x45)
+#define SENSOR_AGAIN_ADAPT_STEP (1)
+#define SENSOR_MAX_AGAIN (0x7f)
+
+	HI_U32 ret_Again;
+	HI_U16 BLC_top = SENSOR_BLC_TOP_VALUE, BLC_bot = SENSOR_BLC_BOT_VALUE, BLC_reg, /*Again_step = SENSOR_AGAIN_ADAPT_STEP,*/ gain_index;
+	static HI_U16 MaxAgain = SENSOR_MAX_AGAIN;
+	BLC_reg = sensor_read_register(0X3911);
+
+	gain_index = gainmap_gain2index(MaxAgain);
+
+	if(BLC_reg > BLC_top){//>0x58
+		if(gain_index>0){
+			//limit max Again by step
+			gain_index -= SENSOR_AGAIN_ADAPT_STEP;
+		}
+		MaxAgain = sensor_gain_map[gain_index];
+	}else if(BLC_reg < BLC_bot){//<0x45
+		//release Again limit by step
+		gain_index += SENSOR_AGAIN_ADAPT_STEP;
+		if(gain_index > sizeof(sensor_gain_map)/sizeof(sensor_gain_map[0])-1){
+			gain_index = sizeof(sensor_gain_map)/sizeof(sensor_gain_map[0]) - 1;
+		}
+		MaxAgain = sensor_gain_map[gain_index];
+	}else{//0x45 < BLC_reg < 0x58
+		//do nothing
+	}
+	ret_Again = Again > MaxAgain ? MaxAgain : Again;
+	//printf("limit gain:ret_Again=%d;Again=%d;MaxAgain=%d\n", ret_Again, Again, MaxAgain);
+	return ret_Again;
+}
+
+
+
+static HI_VOID cmos_gains_update(HI_U32 u32Again, HI_U32 u32Dgain)
+{
+	HI_U32 u32DGReg = 0;
+	HI_U8 u8AgainHigh, u8AgainLow;
+
+	cmos_get_sns_regs_info(&g_stSnsRegsInfo);
+
+	if (u32Again >= 1 && u32Again < 0x10)
+		u8AgainHigh = 0x0;
+	else if (u32Again >= 0x10 && u32Again < 0x20)
+		u8AgainHigh = 0x1;
+	else if (u32Again >= 0x20 && u32Again < 0x30)
+		u8AgainHigh = 0x3;
+	else if (u32Again >= 0x30 && u32Again < 0x40)
+		u8AgainHigh = 0x7;
+	else
+		u8AgainHigh = 0x0;
+
+	u8AgainLow = u32Again & 0xf;
+
+
+	if (u32Dgain == 0)
+	{
+		u32DGReg = 0;
+	}
+	else if (u32Dgain == 1)
+	{
+		u32DGReg = 1;
+	}
+	else if (u32Dgain == 2)
+	{
+		u32DGReg = 3;
+	}
+	else
+	{
+		u32DGReg = 3;
+	}
+
+#if CMOS_SC1135_ISP_WRITE_SENSOR_ENABLE
+	g_stSnsRegsInfo.astI2cData[3].u32Data =  sc1135_Again_limit((u8AgainHigh<<4) | u8AgainLow);
+	g_stSnsRegsInfo.astI2cData[2].u32Data = u32DGReg;
+	HI_MPI_ISP_SnsRegsCfg(&g_stSnsRegsInfo);
+#else
+	sensor_write_register(0x3e09, sc1135_Again_limit((u8AgainHigh<<4) | u8AgainLow));
+	sensor_write_register(0x3e08, u32DGReg);
+#endif
+
+
+#if 1
+	HI_U8 u8AgainVal = 0,u8DgainVal = 0;
+	u8AgainVal = (u8AgainHigh<<4) | u8AgainLow;
+	u8DgainVal = u32DGReg;
+
+	if((u8DgainVal == 0) && (u8AgainVal<0x10))
+	{
+		sensor_write_register(0x3630,0xd0);
+		sensor_write_register(0x3631,0x80);
+	}
+	else if((u8DgainVal == 0) && (u8AgainVal >= 0x10))
+	{
+		sensor_write_register(0x3630,0x60);
+		sensor_write_register(0x3631,0x8e);
+	}
+	else // u8DgainVal  !=  0
+	{
+		sensor_write_register(0x3630,0x60);
+		sensor_write_register(0x3631,0x8c);
+	}
+#endif
+
+	return;
+}
+
+
+HI_S32 cmos_init_ae_exp_function(AE_SENSOR_EXP_FUNC_S *pstExpFuncs)
+{
+	memset(pstExpFuncs, 0, sizeof(AE_SENSOR_EXP_FUNC_S));
+
+	pstExpFuncs->pfn_cmos_get_ae_default    = cmos_get_ae_default;
+	pstExpFuncs->pfn_cmos_fps_set           = cmos_fps_set;
+	pstExpFuncs->pfn_cmos_slow_framerate_set= cmos_slow_framerate_set;
+	pstExpFuncs->pfn_cmos_inttime_update    = cmos_inttime_update;
+	pstExpFuncs->pfn_cmos_gains_update      = cmos_gains_update;
+	pstExpFuncs->pfn_cmos_again_calc_table  = cmos_again_calc_table;
+	pstExpFuncs->pfn_cmos_dgain_calc_table  = cmos_dgain_calc_table;
+
+	return 0;
+}
+
+
+/* AWB default parameter and function */
+static AWB_CCM_S g_stAwbCcm =
+{
+	4850,
+	{
+		0x01B6,  0x80B4,  0x8002,
+		0x805D,  0x01A2,  0x8045,
+		0x000A,  0x813F,  0x0235
+	},
+
+	3160,
+	{
+		0x01B5,  0x8071,  0x8044,
+		0x808A,  0x01B9,  0x802F,
+		0x8003,  0x81B5,  0x02B8
+	},
+
+	2470,
+	{
+		0x014F,  0x0091,  0x80E0,
+		0x8095,  0x01E5,  0x8050,
+		0x803B,  0x81CF,  0x030A
+	}
+
+};
+
+static AWB_AGC_TABLE_S g_stAwbAgcTable =
+{
+	/* bvalid */
+	1,
+
+	/* saturation */
+	/*1,  2,  4,  8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768*/
+	{0x90,0x90,0x80,0x80,0x70,0x70,0x50,0x50}//,0x50,0x50,0x50,0x50,0x50,0x50,0x50,0x50}
+};
+
+static HI_S32 cmos_get_awb_default(AWB_SENSOR_DEFAULT_S *pstAwbSnsDft)
+{
+	if (HI_NULL == pstAwbSnsDft)
+	{
+		printf("null pointer when get awb default value!\n");
+		return -1;
+	}
+
+	memset(pstAwbSnsDft, 0, sizeof(AWB_SENSOR_DEFAULT_S));
+
+	pstAwbSnsDft->u16WbRefTemp = 4850;
+	pstAwbSnsDft->au16GainOffset[0] = 0x18b;
+	pstAwbSnsDft->au16GainOffset[1] = 0x100;
+	pstAwbSnsDft->au16GainOffset[2] = 0x100;
+	pstAwbSnsDft->au16GainOffset[3] = 0x171;
+	pstAwbSnsDft->as32WbPara[0] = 104;
+	pstAwbSnsDft->as32WbPara[1] = 9;
+	pstAwbSnsDft->as32WbPara[2] = -143;
+	pstAwbSnsDft->as32WbPara[3] = 188843;
+	pstAwbSnsDft->as32WbPara[4] = 128;
+	pstAwbSnsDft->as32WbPara[5] = -140071;
+
+	memcpy(&pstAwbSnsDft->stCcm, &g_stAwbCcm, sizeof(AWB_CCM_S));
+	memcpy(&pstAwbSnsDft->stAgcTbl, &g_stAwbAgcTable, sizeof(AWB_AGC_TABLE_S));
+
+	return 0;
+}
+
+HI_S32 cmos_init_awb_exp_function(AWB_SENSOR_EXP_FUNC_S *pstExpFuncs)
+{
+	memset(pstExpFuncs, 0, sizeof(AWB_SENSOR_EXP_FUNC_S));
+
+	pstExpFuncs->pfn_cmos_get_awb_default = cmos_get_awb_default;
+
+	return 0;
+}
+
+#define DMNR_CALIB_CARVE_NUM_SC1135 8
+
+float g_coef_calib_sc1135[DMNR_CALIB_CARVE_NUM_SC1135][4] =
+{
+	{100.000000f, 2.000000f, 0.036803f, 2.165183f, },
+	{200.000000f, 2.301030f, 0.037471f, 2.296438f, },
+	{400.000000f, 2.602060f, 0.039678f, 2.043633f, },
+	{800.000000f, 2.903090f, 0.042475f, 2.152369f, },
+	{1592.000000f, 3.201943f, 0.048132f, 1.998313f, },
+	{3231.000000f, 3.509337f, 0.054542f, 3.439073f, },
+	{6532.000000f, 3.815046f, 0.068091f, 4.175384f, },
+	{12477.000000f, 4.096110f, 0.084936f, 5.255723f, },
+};
+
+
+
+//static ISP_NR_ISO_PARA_TABLE_S g_stNrIsoParaTab[HI_ISP_NR_ISO_LEVEL_MAX] =
+//{
+//	//u16Threshold//u8varStrength//u8fixStrength//u8LowFreqSlope
+//	{1500,       160,             256-256,            0 },  //100    //                      //
+//	{1500,       120,             256-256,            0 },  //200    // ISO                  // ISO //u8LowFreqSlope
+//	{1500,       100,             256-256,            0 },  //400    //{400,  1200, 96,256}, //{400 , 0  }
+//{1750,       80,              256-256,            8 },  //800    //{800,  1400, 80,256}, //{600 , 2  }
+//{1500,       255,             256-256,            6 },  //1600   //{1600, 1200, 72,256}, //{800 , 8  }
+//{1500,       255,             256-256,            0 },  //3200   //{3200, 1200, 64,256}, //{1000, 12 }
+//{1375,       255,             256-256,            0 },  //6400   //{6400, 1100, 56,256}, //{1600, 6  }
+//{1375,       255,             256-256,            0 },  //12800  //{12000,1100, 48,256}, //{2400, 0  }
+//{1375,       255,             256-256,            0 },  //25600  //{36000,1100, 48,256}, //
+//{1375,       255,             256-256,            0 },  //51200  //{64000,1100, 96,256}, //
+//{1250,       255,             256-256,            0 },  //102400 //{82000,1000,240,256}, //
+//{1250,       255,             256-256,            0 },  //204800 //                           //
+//{1250,       255,             256-256,            0 },  //409600 //                           //
+//{1250,       255,             256-256,            0 },  //819200 //                           //
+//{1250,       255,             256-256,            0 },  //1638400//                           //
+//{1250,       255,             256-256,            0 },  //3276800//                           //
+//	};
+
+//static ISP_CMOS_DEMOSAIC_S g_stIspDemosaic =
+//{
+//	/*For Demosaic*/
+//	1, /*bEnable*/
+//	24,/*u16VhLimit*/
+//	40-24,/*u16VhOffset*/
+//	24,   /*u16VhSlope*/
+//	/*False Color*/
+//	1,    /*bFcrEnable*/
+//	{ 8, 8, 8, 8, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0},    /*au8FcrStrength[ISP_AUTO_ISO_STENGTH_NUM]*/
+//	{24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24},    /*au8FcrThreshold[ISP_AUTO_ISO_STENGTH_NUM]*/
+//	/*For Ahd*/
+//	400, /*u16UuSlope*/
+//	{512,512,512,512,512,512,512,  400,  0,0,0,0,0,0,0,0}    /*au16NpOffset[ISP_AUTO_ISO_STENGTH_NUM]*/
+//};
+
+static ISP_CMOS_DEMOSAIC_S g_stIspDemosaic =
+{
+    /* bvalid */
+    1,
+
+    /*vh_slope*/
+    220,
+
+    /*aa_slope*/
+    200,
+
+    /*va_slope*/
+    185,
+
+    /*uu_slope*/
+    210,
+
+    /*sat_slope*/
+    93,
+
+    /*ac_slope*/
+    160,
+
+    /*vh_thresh*/
+    0,
+
+    /*aa_thresh*/
+    0,
+
+    /*va_thresh*/
+    0,
+
+    /*uu_thresh*/
+    8,
+
+    /*sat_thresh*/
+    0,
+
+    /*ac_thresh*/
+    0x1b3
+};
+
+
+//static ISP_CMOS_GE_S g_stIspGe =
+//{
+//	/*For GE*/
+//	0,    /*bEnable*/
+//	7,    /*u8Slope*/
+//	7,    /*u8Sensitivity*/
+//	4096, /*u16Threshold*/
+//	4096, /*u16SensiThreshold*/
+//	{1024,1024,1024,2048,2048,2048,2048,  2048,  2048,2048,2048,2048,2048,2048,2048,2048}    /*au16Strength[ISP_AUTO_ISO_STENGTH_NUM]*/
+//};
+//static ISP_CMOS_RGBSHARPEN_S g_stIspRgbSharpen =
+//{
+//	{0,	  0,   0,  0,   0,   0,   0,    0,    0,    1,    1,     1,     1,     1,     1,       1},/* enPixSel */
+//	{0xf0, 0x70, 0x68, 0x60, 0x50, 0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},/*SharpenUD*/ //3.23 wangji
+//	{0x80, 0x70, 0x68, 0x60, 0x50, 0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},/*SharpenD*/  //3.23 wangji
+//	{0x10, 0x18, 0x20, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},/*NoiseThd*/
+//	{0x18, 0x2f, 0x18, 0x09, 0x04, 0x07, 0x07, 0x07, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c},/*EdgeThd2*/
+//	{0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},/*overshootAmt*/ //3.23 wangji
+//	{0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},/*undershootAmt*///3.23 wangji
+//};
+
+//static ISP_CMOS_UVNR_S g_stIspUVNR =
+//{
+//	{1,	  2,   4,   5,    7,   10,   12,    16,    18,    20,     22,     24,     24,     24,      24,      24},  /*UVNRThreshold*/
+//	{0,	  0,   0,   0,	  0, 	0,    0,     0,     0,	   1,      1,      2,      2,      2,       2,       2},  /*Coring_lutLimit*/
+//	{0,	  0,   0,  16,   34,   34,   34,    34,    34,    34,     34,     34,     34,     34,      34,      34}   /*UVNR_blendRatio*/
+//};
+
+//static ISP_CMOS_DPC_S g_stCmosDpc =
+//{
+//	//0,/*IR_channel*/
+//	//0,/*IR_position*/
+//	{70,150,240,248,250,252,252,252,252,252,252,252,252,252,252,252},/*au16Strength[16]*/
+//	{0,0,0,0,0,0,0,0x30,0x60,0x80,0x80,0x80,0xE5,0xE5,0xE5,0xE5},/*au16BlendRatio[16]*/
+//};
+
+
+//static ISP_LSC_CABLI_UNI_TABLE_S g_stCmosLscUniTable =
+//{
+//	/* Mesh Grid Info: Width */
+//	{9, 13, 18, 26, 36, 50, 70, 98},
+//	/* Mesh Grid Info: Height */
+//	{7, 10, 14, 19, 27, 38, 52, 73},
+//};
+
+//static ISP_LSC_CABLI_TABLE_S g_stCmosLscTable[HI_ISP_LSC_LIGHT_NUM] =
+//{
+//	/* Light Source 1 */
+//	{
+//		/* AWB RGain */
+//		256,
+//		/* AWB BGain */
+//		256,
+//		/* Channel R */
+//		{			  20729753, 20475625, 19803352, 18912098, 17664130, 16293035, 14891347, 13689246, 12930767, 13677134, 15061625, 16442373, 17863714, 19143313, 20010332, 20680624, 20976999,
+//			20599909, 20343134, 19660232, 18755427, 17544851, 16172300, 14800093, 13574635, 12832091, 13570074, 14934293, 16332060, 17733098, 18991039, 19860580, 20511904, 20767436,
+//			20208349, 19956673, 19307705, 18420453, 17268656, 15897458, 14532107, 13278929, 12594212, 13306470, 14670926, 16044244, 17446842, 18648007, 19527067, 20176807, 20415443,
+//			19628823, 19424839, 18817960, 17948773, 16813365, 15488425, 14116657, 12866447, 12234518, 12940049, 14243565, 15616572, 17006071, 18153487, 19054249, 19657858, 19878162,
+//			19026899, 18831565, 18228314, 17336468, 16302621, 14983217, 13628757, 12414377, 11802526, 12487373, 13785204, 15163644, 16458944, 17589755, 18460140, 19075529, 19338956,
+//			18220154, 18033335, 17457950, 16652292, 15559202, 14378170, 13037690, 11812883, 11227499, 11894581, 13202904, 14581651, 15810275, 16867914, 17688120, 18348049, 18636999,
+//			17494945, 17318947, 16741179, 15909061, 14913003, 13719674, 12434556, 11237647, 10622726, 11331487, 12630059, 13978024, 15190527, 16201673, 17023466, 17632860, 17849575,
+//			16849529, 16650217, 16113673, 15301538, 14308232, 13143444, 11900151, 10682279, 10310739, 10793227, 12118061, 13408429, 14629479, 15623785, 16483734, 17088465, 17317738,
+//			16620310, 16443411, 15884951, 15109372, 14099769, 12931184, 11696948, 10486282, 10000000, 10626951, 11942135, 13192907, 14393226, 15444710, 16248822, 16807886, 17016404,
+//			17302495, 17099403, 16523679, 15739863, 14725875, 13552493, 12247115, 11084615, 10616491, 11196226, 12545140, 13806650, 15006697, 16091126, 16923314, 17543906, 17799991,
+//			18351604, 18148048, 17544201, 16700873, 15636118, 14375234, 13051867, 11848321, 11354654, 11996946, 13301544, 14645437, 15938070, 16997859, 17895624, 18523943, 18754279,
+//			19401906, 19159507, 18504006, 17599144, 16513779, 15172742, 13831907, 12583443, 12015125, 12726510, 14048514, 15496211, 16845061, 17965734, 18941529, 19664833, 19928045,
+//			20454641, 20235980, 19530141, 18579702, 17407315, 16050275, 14608885, 13319160, 12728874, 13462519, 14802784, 16321315, 17721154, 18923915, 19968376, 20740234, 21034170,
+//			21183165, 20954217, 20252501, 19264651, 18047392, 16662679, 15185125, 13844479, 13253423, 14020006, 15380597, 16944396, 18413226, 19673076, 20704707, 21510025, 21831931,
+//			21800685, 21561304, 20780028, 19794323, 18600068, 17185540, 15679698, 14292137, 13697560, 14408074, 15858163, 17468312, 18963870, 20278596, 21337257, 22139223, 22468170,
+//			22290030, 22017768, 21185319, 20217917, 19022383, 17547570, 16016128, 14630835, 14015254, 14771556, 16207470, 17869474, 19390856, 20714833, 21824340, 22615258, 22945972,
+//			22479028, 22232858, 21442913, 20424568, 19187098, 17730382, 16160310, 14775285, 14156783, 14964882, 16399515, 18061157, 19583516, 20947561, 22069069, 22829027, 23144250,
+//		},
+//		/* Channel Gr */
+//		{			  20796680, 20612029, 19952339, 18996307, 17762892, 16342160, 14927902, 13762776, 12962272, 13683597, 14973160, 16359638, 17781995, 19017821, 19916316, 20549305, 20844928,
+//			20661908, 20455017, 19788584, 18853641, 17644227, 16242224, 14806627, 13644336, 12855560, 13562906, 14860790, 16229247, 17649585, 18869366, 19733444, 20377515, 20658124,
+//			20299235, 20075265, 19424216, 18534460, 17334423, 15954364, 14535953, 13351420, 12607292, 13328247, 14596406, 15946149, 17339236, 18518789, 19346833, 19993358, 20268417,
+//			19701031, 19527421, 18935280, 18047217, 16882649, 15520048, 14170434, 12921510, 12274525, 12964674, 14228201, 15563970, 16917385, 18024960, 18877852, 19482109, 19717121,
+//			19036890, 18851572, 18318517, 17503063, 16307351, 15042910, 13693342, 12462943, 11866624, 12520869, 13751756, 15151588, 16418681, 17487872, 18289121, 18927075, 19190927,
+//			18223885, 18053038, 17530431, 16710645, 15633200, 14431487, 13103160, 11870129, 11296846, 11921027, 13210691, 14559311, 15762995, 16804518, 17576918, 18177853, 18439525,
+//			17535273, 17345724, 16807882, 15996989, 14998392, 13785021, 12478791, 11277204, 10681604, 11400713, 12670352, 14020565, 15168194, 16110563, 16927655, 17562579, 17827009,
+//			16799138, 16648313, 16148574, 15361379, 14345322, 13179768, 11921535, 10712040, 10359450, 10822581, 12159804, 13437273, 14617555, 15554967, 16446412, 17045186, 17294947,
+//			16600000, 16431034, 15919475, 15119301, 14103415, 12959827, 11716192, 10507596, 10000000, 10633937, 11952707, 13185357, 14354097, 15420470, 16173390, 16709906, 16922803,
+//			17249426, 17085693, 16534328, 15744799, 14713274, 13567752, 12236481, 11074703, 10629435, 11198537, 12554257, 13796070, 14957570, 16058010, 16863848, 17453821, 17722440,
+//			18323758, 18122442, 17524211, 16654882, 15591621, 14353333, 13027033, 11843041, 11348695, 11992220, 13286766, 14581000, 15858035, 16889517, 17728594, 18379827, 18639294,
+//			19305609, 19103740, 18466382, 17558947, 16450673, 15116156, 13775170, 12574919, 12006416, 12706999, 13991412, 15412890, 16757970, 17841657, 18793714, 19475632, 19721032,
+//			20355722, 20148117, 19460133, 18492232, 17354010, 15964139, 14550900, 13282609, 12689352, 13439806, 14735740, 16233710, 17620323, 18780869, 19779157, 20526251, 20810140,
+//			21052430, 20857414, 20164246, 19195412, 17957110, 16568152, 15091551, 13808600, 13210159, 13934212, 15262588, 16844563, 18293770, 19511790, 20547740, 21325737, 21635371,
+//			21671111, 21447888, 20735275, 19736640, 18483954, 17051302, 15524257, 14196684, 13628660, 14327017, 15706672, 17355684, 18818427, 20097209, 21201222, 21986964, 22301163,
+//			22111523, 21875510, 21137881, 20119255, 18855806, 17406338, 15840383, 14470343, 13917120, 14628988, 16023380, 17684820, 19189123, 20503193, 21619648, 22438642, 22797299,
+//			22286035, 22047524, 21290827, 20279949, 19009305, 17565804, 15986396, 14610066, 14040078, 14808862, 16182708, 17828775, 19326693, 20689403, 21846354, 22629824, 22987323,
+//		},
+//		/* Channel Gb */
+//		{			  20848664, 20601082, 19935743, 18969947, 17814577, 16356322, 14963875, 13784156, 12987988, 13653247, 15005620, 16411670, 17819383, 19098601, 19968659, 20624467, 20871295,
+//			20702724, 20456702, 19784054, 18841986, 17662040, 16239407, 14842661, 13643902, 12872006, 13556110, 14888633, 16279228, 17685812, 18924051, 19822729, 20461442, 20708594,
+//			20326292, 20104187, 19442848, 18551123, 17349915, 15952983, 14567089, 13347908, 12630290, 13302716, 14611565, 15992587, 17358083, 18572899, 19455100, 20093337, 20362368,
+//			19752205, 19560875, 18996375, 18109453, 16907483, 15537144, 14190696, 12900538, 12293299, 12940278, 14203673, 15596425, 16938403, 18115025, 18994000, 19601616, 19811871,
+//			19091832, 18927919, 18380298, 17542592, 16325979, 15061834, 13696680, 12462971, 11855602, 12519550, 13777755, 15174684, 16435785, 17542024, 18375229, 18974829, 19213251,
+//			18311786, 18132065, 17574498, 16750829, 15677036, 14454916, 13122315, 11883966, 11290078, 11920412, 13232928, 14605748, 15854840, 16878664, 17667710, 18257378, 18525422,
+//			17605214, 17436709, 16888497, 16032863, 15026699, 13821683, 12524195, 11287762, 10690757, 11395853, 12688210, 14027153, 15226066, 16211884, 17017153, 17654445, 17888551,
+//			16871727, 16716431, 16233680, 15413633, 14386301, 13229286, 11945724, 10724996, 10343002, 10838747, 12205346, 13479290, 14668286, 15658678, 16534937, 17160804, 17418194,
+//			16720147, 16521270, 15968277, 15175472, 14166477, 12989321, 11762858, 10521768, 10000000, 10656556, 11981662, 13221203, 14397400, 15488760, 16270370, 16812530, 17039985,
+//			17374324, 17169649, 16564689, 15775768, 14787608, 13596297, 12265881, 11070773, 10624788, 11205856, 12596961, 13822841, 15046228, 16131242, 16962008, 17542105, 17793709,
+//			18358572, 18177196, 17600400, 16705731, 15644035, 14407751, 13049490, 11868293, 11368951, 12012209, 13331741, 14655917, 15934273, 16990999, 17855957, 18534825, 18832689,
+//			19362648, 19131074, 18498485, 17653214, 16491208, 15152342, 13802443, 12584938, 11995685, 12733094, 14035889, 15480804, 16821691, 17928709, 18865622, 19597064, 19903717,
+//			20398573, 20194688, 19513032, 18540617, 17347220, 15979431, 14543351, 13271985, 12699858, 13436414, 14759704, 16284394, 17712126, 18881005, 19896104, 20639656, 20948030,
+//			21180952, 20926329, 20194635, 19228720, 18014781, 16632525, 15101966, 13804349, 13209016, 13955038, 15294503, 16920818, 18375807, 19613562, 20718819, 21450205, 21701993,
+//			21714900, 21486676, 20770722, 19771899, 18539983, 17057896, 15520031, 14209174, 13616774, 14324113, 15729048, 17401513, 18919667, 20158187, 21314818, 22120684, 22430743,
+//			22088645, 21861221, 21163423, 20157813, 18901492, 17426107, 15823657, 14488474, 13919998, 14635808, 16071914, 17767692, 19305359, 20600412, 21756764, 22561208, 22854907,
+//			22260337, 22057020, 21345489, 20364225, 19058870, 17603663, 15976608, 14638064, 14066616, 14802422, 16221302, 17959955, 19470362, 20851927, 21987418, 22806249, 23090950,
+//		},
+//		/* Channel B */
+//		{			  20042148, 19779193, 19172969, 18270590, 17225046, 15925687, 14671152, 13596535, 12839040, 13594736, 14775057, 16027015, 17274753, 18316906, 19146706, 19755674, 19924063,
+//			19905624, 19638707, 19016726, 18159800, 17108956, 15817874, 14571261, 13480962, 12731174, 13474939, 14658634, 15905785, 17130716, 18169551, 19006956, 19607343, 19769610,
+//			19579325, 19315516, 18694234, 17875851, 16825870, 15581940, 14319935, 13213853, 12509106, 13208632, 14411382, 15638146, 16854233, 17899261, 18712136, 19275864, 19481788,
+//			19086712, 18842130, 18266741, 17464437, 16381958, 15207200, 13959845, 12821686, 12190508, 12850784, 14060796, 15284058, 16433186, 17519629, 18301804, 18860445, 19117617,
+//			18555216, 18323317, 17724094, 16948899, 15886569, 14740598, 13492336, 12386503, 11785610, 12435383, 13632274, 14876456, 15999798, 17024503, 17811247, 18364855, 18569745,
+//			17813019, 17586310, 16991558, 16220682, 15271818, 14203200, 12944067, 11835228, 11239478, 11855430, 13095824, 14317312, 15429867, 16459116, 17182539, 17705885, 17927016,
+//			17113335, 16885054, 16338500, 15557477, 14653602, 13574716, 12384126, 11281888, 10666091, 11336881, 12574698, 13765031, 14880205, 15885932, 16574247, 17090724, 17320530,
+//			16433332, 16226231, 15700753, 15026916, 14096263, 12996269, 11845434, 10704070, 10335470, 10811618, 12067871, 13230487, 14407228, 15336181, 16046526, 16610164, 16854233,
+//			16226231, 16029145, 15517931, 14803791, 13869826, 12797764, 11650731, 10498565, 10000000, 10623009, 11872704, 13056384, 14210438, 15160213, 15879796, 16348319, 16548249,
+//			16862581, 16664084, 16084292, 15352601, 14459522, 13360708, 12168161, 11035391, 10626202, 11206023, 12446316, 13673590, 14786750, 15755091, 16541393, 17065811, 17272602,
+//			17835462, 17598189, 16978509, 16189260, 15257332, 14148086, 12923869, 11781331, 11352118, 11957718, 13153872, 14474306, 15580103, 16570832, 17359650, 17930202, 18143947,
+//			18649502, 18452363, 17868253, 17051024, 16069341, 14868284, 13632341, 12497049, 12000748, 12637268, 13871699, 15245846, 16424772, 17455482, 18268485, 18852564, 19066645,
+//			19659580, 19436412, 18783645, 17892335, 16888086, 15637264, 14358469, 13162639, 12660622, 13339126, 14604124, 15999890, 17214627, 18315636, 19187222, 19828311, 20043378,
+//			20338020, 20092437, 19387588, 18510714, 17466691, 16221203, 14850141, 13649576, 13123946, 13825423, 15084798, 16520562, 17877406, 18979458, 19878670, 20562597, 20795384,
+//			20805910, 20543415, 19870556, 18961429, 17874124, 16626438, 15225851, 14015623, 13489614, 14186063, 15496438, 16976951, 18307781, 19472764, 20407503, 21054650, 21302293,
+//			21229762, 20933528, 20235085, 19334494, 18158671, 16955010, 15514504, 14249226, 13746925, 14477667, 15794643, 17284923, 18658845, 19828665, 20807236, 21461627, 21765079,
+//			21468020, 21134999, 20381794, 19542574, 18318901, 17116080, 15671887, 14373568, 13873502, 14638411, 15961509, 17461249, 18838804, 20014246, 21036931, 21681233, 22034720,
+//
+//		},
+//	},
+//
+//	/* Light Source 2 */
+//	{
+//		/* AWB RGain */
+//		256,
+//		/* AWB BGain */
+//		256,
+//		/* Channel R */
+//		{			  20729753, 20475625, 19803352, 18912098, 17664130, 16293035, 14891347, 13689246, 12930767, 13677134, 15061625, 16442373, 17863714, 19143313, 20010332, 20680624, 20976999,
+//			20599909, 20343134, 19660232, 18755427, 17544851, 16172300, 14800093, 13574635, 12832091, 13570074, 14934293, 16332060, 17733098, 18991039, 19860580, 20511904, 20767436,
+//			20208349, 19956673, 19307705, 18420453, 17268656, 15897458, 14532107, 13278929, 12594212, 13306470, 14670926, 16044244, 17446842, 18648007, 19527067, 20176807, 20415443,
+//			19628823, 19424839, 18817960, 17948773, 16813365, 15488425, 14116657, 12866447, 12234518, 12940049, 14243565, 15616572, 17006071, 18153487, 19054249, 19657858, 19878162,
+//			19026899, 18831565, 18228314, 17336468, 16302621, 14983217, 13628757, 12414377, 11802526, 12487373, 13785204, 15163644, 16458944, 17589755, 18460140, 19075529, 19338956,
+//			18220154, 18033335, 17457950, 16652292, 15559202, 14378170, 13037690, 11812883, 11227499, 11894581, 13202904, 14581651, 15810275, 16867914, 17688120, 18348049, 18636999,
+//			17494945, 17318947, 16741179, 15909061, 14913003, 13719674, 12434556, 11237647, 10622726, 11331487, 12630059, 13978024, 15190527, 16201673, 17023466, 17632860, 17849575,
+//			16849529, 16650217, 16113673, 15301538, 14308232, 13143444, 11900151, 10682279, 10310739, 10793227, 12118061, 13408429, 14629479, 15623785, 16483734, 17088465, 17317738,
+//			16620310, 16443411, 15884951, 15109372, 14099769, 12931184, 11696948, 10486282, 10000000, 10626951, 11942135, 13192907, 14393226, 15444710, 16248822, 16807886, 17016404,
+//			17302495, 17099403, 16523679, 15739863, 14725875, 13552493, 12247115, 11084615, 10616491, 11196226, 12545140, 13806650, 15006697, 16091126, 16923314, 17543906, 17799991,
+//			18351604, 18148048, 17544201, 16700873, 15636118, 14375234, 13051867, 11848321, 11354654, 11996946, 13301544, 14645437, 15938070, 16997859, 17895624, 18523943, 18754279,
+//			19401906, 19159507, 18504006, 17599144, 16513779, 15172742, 13831907, 12583443, 12015125, 12726510, 14048514, 15496211, 16845061, 17965734, 18941529, 19664833, 19928045,
+//			20454641, 20235980, 19530141, 18579702, 17407315, 16050275, 14608885, 13319160, 12728874, 13462519, 14802784, 16321315, 17721154, 18923915, 19968376, 20740234, 21034170,
+//			21183165, 20954217, 20252501, 19264651, 18047392, 16662679, 15185125, 13844479, 13253423, 14020006, 15380597, 16944396, 18413226, 19673076, 20704707, 21510025, 21831931,
+//			21800685, 21561304, 20780028, 19794323, 18600068, 17185540, 15679698, 14292137, 13697560, 14408074, 15858163, 17468312, 18963870, 20278596, 21337257, 22139223, 22468170,
+//			22290030, 22017768, 21185319, 20217917, 19022383, 17547570, 16016128, 14630835, 14015254, 14771556, 16207470, 17869474, 19390856, 20714833, 21824340, 22615258, 22945972,
+//			22479028, 22232858, 21442913, 20424568, 19187098, 17730382, 16160310, 14775285, 14156783, 14964882, 16399515, 18061157, 19583516, 20947561, 22069069, 22829027, 23144250,
+//		},
+//		/* Channel Gr */
+//		{			  20796680, 20612029, 19952339, 18996307, 17762892, 16342160, 14927902, 13762776, 12962272, 13683597, 14973160, 16359638, 17781995, 19017821, 19916316, 20549305, 20844928,
+//			20661908, 20455017, 19788584, 18853641, 17644227, 16242224, 14806627, 13644336, 12855560, 13562906, 14860790, 16229247, 17649585, 18869366, 19733444, 20377515, 20658124,
+//			20299235, 20075265, 19424216, 18534460, 17334423, 15954364, 14535953, 13351420, 12607292, 13328247, 14596406, 15946149, 17339236, 18518789, 19346833, 19993358, 20268417,
+//			19701031, 19527421, 18935280, 18047217, 16882649, 15520048, 14170434, 12921510, 12274525, 12964674, 14228201, 15563970, 16917385, 18024960, 18877852, 19482109, 19717121,
+//			19036890, 18851572, 18318517, 17503063, 16307351, 15042910, 13693342, 12462943, 11866624, 12520869, 13751756, 15151588, 16418681, 17487872, 18289121, 18927075, 19190927,
+//			18223885, 18053038, 17530431, 16710645, 15633200, 14431487, 13103160, 11870129, 11296846, 11921027, 13210691, 14559311, 15762995, 16804518, 17576918, 18177853, 18439525,
+//			17535273, 17345724, 16807882, 15996989, 14998392, 13785021, 12478791, 11277204, 10681604, 11400713, 12670352, 14020565, 15168194, 16110563, 16927655, 17562579, 17827009,
+//			16799138, 16648313, 16148574, 15361379, 14345322, 13179768, 11921535, 10712040, 10359450, 10822581, 12159804, 13437273, 14617555, 15554967, 16446412, 17045186, 17294947,
+//			16600000, 16431034, 15919475, 15119301, 14103415, 12959827, 11716192, 10507596, 10000000, 10633937, 11952707, 13185357, 14354097, 15420470, 16173390, 16709906, 16922803,
+//			17249426, 17085693, 16534328, 15744799, 14713274, 13567752, 12236481, 11074703, 10629435, 11198537, 12554257, 13796070, 14957570, 16058010, 16863848, 17453821, 17722440,
+//			18323758, 18122442, 17524211, 16654882, 15591621, 14353333, 13027033, 11843041, 11348695, 11992220, 13286766, 14581000, 15858035, 16889517, 17728594, 18379827, 18639294,
+//			19305609, 19103740, 18466382, 17558947, 16450673, 15116156, 13775170, 12574919, 12006416, 12706999, 13991412, 15412890, 16757970, 17841657, 18793714, 19475632, 19721032,
+//			20355722, 20148117, 19460133, 18492232, 17354010, 15964139, 14550900, 13282609, 12689352, 13439806, 14735740, 16233710, 17620323, 18780869, 19779157, 20526251, 20810140,
+//			21052430, 20857414, 20164246, 19195412, 17957110, 16568152, 15091551, 13808600, 13210159, 13934212, 15262588, 16844563, 18293770, 19511790, 20547740, 21325737, 21635371,
+//			21671111, 21447888, 20735275, 19736640, 18483954, 17051302, 15524257, 14196684, 13628660, 14327017, 15706672, 17355684, 18818427, 20097209, 21201222, 21986964, 22301163,
+//			22111523, 21875510, 21137881, 20119255, 18855806, 17406338, 15840383, 14470343, 13917120, 14628988, 16023380, 17684820, 19189123, 20503193, 21619648, 22438642, 22797299,
+//			22286035, 22047524, 21290827, 20279949, 19009305, 17565804, 15986396, 14610066, 14040078, 14808862, 16182708, 17828775, 19326693, 20689403, 21846354, 22629824, 22987323,
+//		},
+//		/* Channel Gb */
+//		{			  20848664, 20601082, 19935743, 18969947, 17814577, 16356322, 14963875, 13784156, 12987988, 13653247, 15005620, 16411670, 17819383, 19098601, 19968659, 20624467, 20871295,
+//			20702724, 20456702, 19784054, 18841986, 17662040, 16239407, 14842661, 13643902, 12872006, 13556110, 14888633, 16279228, 17685812, 18924051, 19822729, 20461442, 20708594,
+//			20326292, 20104187, 19442848, 18551123, 17349915, 15952983, 14567089, 13347908, 12630290, 13302716, 14611565, 15992587, 17358083, 18572899, 19455100, 20093337, 20362368,
+//			19752205, 19560875, 18996375, 18109453, 16907483, 15537144, 14190696, 12900538, 12293299, 12940278, 14203673, 15596425, 16938403, 18115025, 18994000, 19601616, 19811871,
+//			19091832, 18927919, 18380298, 17542592, 16325979, 15061834, 13696680, 12462971, 11855602, 12519550, 13777755, 15174684, 16435785, 17542024, 18375229, 18974829, 19213251,
+//			18311786, 18132065, 17574498, 16750829, 15677036, 14454916, 13122315, 11883966, 11290078, 11920412, 13232928, 14605748, 15854840, 16878664, 17667710, 18257378, 18525422,
+//			17605214, 17436709, 16888497, 16032863, 15026699, 13821683, 12524195, 11287762, 10690757, 11395853, 12688210, 14027153, 15226066, 16211884, 17017153, 17654445, 17888551,
+//			16871727, 16716431, 16233680, 15413633, 14386301, 13229286, 11945724, 10724996, 10343002, 10838747, 12205346, 13479290, 14668286, 15658678, 16534937, 17160804, 17418194,
+//			16720147, 16521270, 15968277, 15175472, 14166477, 12989321, 11762858, 10521768, 10000000, 10656556, 11981662, 13221203, 14397400, 15488760, 16270370, 16812530, 17039985,
+//			17374324, 17169649, 16564689, 15775768, 14787608, 13596297, 12265881, 11070773, 10624788, 11205856, 12596961, 13822841, 15046228, 16131242, 16962008, 17542105, 17793709,
+//			18358572, 18177196, 17600400, 16705731, 15644035, 14407751, 13049490, 11868293, 11368951, 12012209, 13331741, 14655917, 15934273, 16990999, 17855957, 18534825, 18832689,
+//			19362648, 19131074, 18498485, 17653214, 16491208, 15152342, 13802443, 12584938, 11995685, 12733094, 14035889, 15480804, 16821691, 17928709, 18865622, 19597064, 19903717,
+//			20398573, 20194688, 19513032, 18540617, 17347220, 15979431, 14543351, 13271985, 12699858, 13436414, 14759704, 16284394, 17712126, 18881005, 19896104, 20639656, 20948030,
+//			21180952, 20926329, 20194635, 19228720, 18014781, 16632525, 15101966, 13804349, 13209016, 13955038, 15294503, 16920818, 18375807, 19613562, 20718819, 21450205, 21701993,
+//			21714900, 21486676, 20770722, 19771899, 18539983, 17057896, 15520031, 14209174, 13616774, 14324113, 15729048, 17401513, 18919667, 20158187, 21314818, 22120684, 22430743,
+//			22088645, 21861221, 21163423, 20157813, 18901492, 17426107, 15823657, 14488474, 13919998, 14635808, 16071914, 17767692, 19305359, 20600412, 21756764, 22561208, 22854907,
+//			22260337, 22057020, 21345489, 20364225, 19058870, 17603663, 15976608, 14638064, 14066616, 14802422, 16221302, 17959955, 19470362, 20851927, 21987418, 22806249, 23090950,
+//		},
+//		/* Channel B */
+//		{			  20042148, 19779193, 19172969, 18270590, 17225046, 15925687, 14671152, 13596535, 12839040, 13594736, 14775057, 16027015, 17274753, 18316906, 19146706, 19755674, 19924063,
+//			19905624, 19638707, 19016726, 18159800, 17108956, 15817874, 14571261, 13480962, 12731174, 13474939, 14658634, 15905785, 17130716, 18169551, 19006956, 19607343, 19769610,
+//			19579325, 19315516, 18694234, 17875851, 16825870, 15581940, 14319935, 13213853, 12509106, 13208632, 14411382, 15638146, 16854233, 17899261, 18712136, 19275864, 19481788,
+//			19086712, 18842130, 18266741, 17464437, 16381958, 15207200, 13959845, 12821686, 12190508, 12850784, 14060796, 15284058, 16433186, 17519629, 18301804, 18860445, 19117617,
+//			18555216, 18323317, 17724094, 16948899, 15886569, 14740598, 13492336, 12386503, 11785610, 12435383, 13632274, 14876456, 15999798, 17024503, 17811247, 18364855, 18569745,
+//			17813019, 17586310, 16991558, 16220682, 15271818, 14203200, 12944067, 11835228, 11239478, 11855430, 13095824, 14317312, 15429867, 16459116, 17182539, 17705885, 17927016,
+//			17113335, 16885054, 16338500, 15557477, 14653602, 13574716, 12384126, 11281888, 10666091, 11336881, 12574698, 13765031, 14880205, 15885932, 16574247, 17090724, 17320530,
+//			16433332, 16226231, 15700753, 15026916, 14096263, 12996269, 11845434, 10704070, 10335470, 10811618, 12067871, 13230487, 14407228, 15336181, 16046526, 16610164, 16854233,
+//			16226231, 16029145, 15517931, 14803791, 13869826, 12797764, 11650731, 10498565, 10000000, 10623009, 11872704, 13056384, 14210438, 15160213, 15879796, 16348319, 16548249,
+//			16862581, 16664084, 16084292, 15352601, 14459522, 13360708, 12168161, 11035391, 10626202, 11206023, 12446316, 13673590, 14786750, 15755091, 16541393, 17065811, 17272602,
+//			17835462, 17598189, 16978509, 16189260, 15257332, 14148086, 12923869, 11781331, 11352118, 11957718, 13153872, 14474306, 15580103, 16570832, 17359650, 17930202, 18143947,
+//			18649502, 18452363, 17868253, 17051024, 16069341, 14868284, 13632341, 12497049, 12000748, 12637268, 13871699, 15245846, 16424772, 17455482, 18268485, 18852564, 19066645,
+//			19659580, 19436412, 18783645, 17892335, 16888086, 15637264, 14358469, 13162639, 12660622, 13339126, 14604124, 15999890, 17214627, 18315636, 19187222, 19828311, 20043378,
+//			20338020, 20092437, 19387588, 18510714, 17466691, 16221203, 14850141, 13649576, 13123946, 13825423, 15084798, 16520562, 17877406, 18979458, 19878670, 20562597, 20795384,
+//			20805910, 20543415, 19870556, 18961429, 17874124, 16626438, 15225851, 14015623, 13489614, 14186063, 15496438, 16976951, 18307781, 19472764, 20407503, 21054650, 21302293,
+//			21229762, 20933528, 20235085, 19334494, 18158671, 16955010, 15514504, 14249226, 13746925, 14477667, 15794643, 17284923, 18658845, 19828665, 20807236, 21461627, 21765079,
+//			21468020, 21134999, 20381794, 19542574, 18318901, 17116080, 15671887, 14373568, 13873502, 14638411, 15961509, 17461249, 18838804, 20014246, 21036931, 21681233, 22034720,
+//
+//		},
+//	},
+//
+//
+//	/* Light Source 3 */
+//	{
+//		/* AWB RGain */
+//		256,
+//		/* AWB BGain */
+//		256,
+//		/* Channel R */
+//		{			  20729753, 20475625, 19803352, 18912098, 17664130, 16293035, 14891347, 13689246, 12930767, 13677134, 15061625, 16442373, 17863714, 19143313, 20010332, 20680624, 20976999,
+//			20599909, 20343134, 19660232, 18755427, 17544851, 16172300, 14800093, 13574635, 12832091, 13570074, 14934293, 16332060, 17733098, 18991039, 19860580, 20511904, 20767436,
+//			20208349, 19956673, 19307705, 18420453, 17268656, 15897458, 14532107, 13278929, 12594212, 13306470, 14670926, 16044244, 17446842, 18648007, 19527067, 20176807, 20415443,
+//			19628823, 19424839, 18817960, 17948773, 16813365, 15488425, 14116657, 12866447, 12234518, 12940049, 14243565, 15616572, 17006071, 18153487, 19054249, 19657858, 19878162,
+//			19026899, 18831565, 18228314, 17336468, 16302621, 14983217, 13628757, 12414377, 11802526, 12487373, 13785204, 15163644, 16458944, 17589755, 18460140, 19075529, 19338956,
+//			18220154, 18033335, 17457950, 16652292, 15559202, 14378170, 13037690, 11812883, 11227499, 11894581, 13202904, 14581651, 15810275, 16867914, 17688120, 18348049, 18636999,
+//			17494945, 17318947, 16741179, 15909061, 14913003, 13719674, 12434556, 11237647, 10622726, 11331487, 12630059, 13978024, 15190527, 16201673, 17023466, 17632860, 17849575,
+//			16849529, 16650217, 16113673, 15301538, 14308232, 13143444, 11900151, 10682279, 10310739, 10793227, 12118061, 13408429, 14629479, 15623785, 16483734, 17088465, 17317738,
+//			16620310, 16443411, 15884951, 15109372, 14099769, 12931184, 11696948, 10486282, 10000000, 10626951, 11942135, 13192907, 14393226, 15444710, 16248822, 16807886, 17016404,
+//			17302495, 17099403, 16523679, 15739863, 14725875, 13552493, 12247115, 11084615, 10616491, 11196226, 12545140, 13806650, 15006697, 16091126, 16923314, 17543906, 17799991,
+//			18351604, 18148048, 17544201, 16700873, 15636118, 14375234, 13051867, 11848321, 11354654, 11996946, 13301544, 14645437, 15938070, 16997859, 17895624, 18523943, 18754279,
+//			19401906, 19159507, 18504006, 17599144, 16513779, 15172742, 13831907, 12583443, 12015125, 12726510, 14048514, 15496211, 16845061, 17965734, 18941529, 19664833, 19928045,
+//			20454641, 20235980, 19530141, 18579702, 17407315, 16050275, 14608885, 13319160, 12728874, 13462519, 14802784, 16321315, 17721154, 18923915, 19968376, 20740234, 21034170,
+//			21183165, 20954217, 20252501, 19264651, 18047392, 16662679, 15185125, 13844479, 13253423, 14020006, 15380597, 16944396, 18413226, 19673076, 20704707, 21510025, 21831931,
+//			21800685, 21561304, 20780028, 19794323, 18600068, 17185540, 15679698, 14292137, 13697560, 14408074, 15858163, 17468312, 18963870, 20278596, 21337257, 22139223, 22468170,
+//			22290030, 22017768, 21185319, 20217917, 19022383, 17547570, 16016128, 14630835, 14015254, 14771556, 16207470, 17869474, 19390856, 20714833, 21824340, 22615258, 22945972,
+//			22479028, 22232858, 21442913, 20424568, 19187098, 17730382, 16160310, 14775285, 14156783, 14964882, 16399515, 18061157, 19583516, 20947561, 22069069, 22829027, 23144250,
+//		},
+//		/* Channel Gr */
+//		{			  20796680, 20612029, 19952339, 18996307, 17762892, 16342160, 14927902, 13762776, 12962272, 13683597, 14973160, 16359638, 17781995, 19017821, 19916316, 20549305, 20844928,
+//			20661908, 20455017, 19788584, 18853641, 17644227, 16242224, 14806627, 13644336, 12855560, 13562906, 14860790, 16229247, 17649585, 18869366, 19733444, 20377515, 20658124,
+//			20299235, 20075265, 19424216, 18534460, 17334423, 15954364, 14535953, 13351420, 12607292, 13328247, 14596406, 15946149, 17339236, 18518789, 19346833, 19993358, 20268417,
+//			19701031, 19527421, 18935280, 18047217, 16882649, 15520048, 14170434, 12921510, 12274525, 12964674, 14228201, 15563970, 16917385, 18024960, 18877852, 19482109, 19717121,
+//			19036890, 18851572, 18318517, 17503063, 16307351, 15042910, 13693342, 12462943, 11866624, 12520869, 13751756, 15151588, 16418681, 17487872, 18289121, 18927075, 19190927,
+//			18223885, 18053038, 17530431, 16710645, 15633200, 14431487, 13103160, 11870129, 11296846, 11921027, 13210691, 14559311, 15762995, 16804518, 17576918, 18177853, 18439525,
+//			17535273, 17345724, 16807882, 15996989, 14998392, 13785021, 12478791, 11277204, 10681604, 11400713, 12670352, 14020565, 15168194, 16110563, 16927655, 17562579, 17827009,
+//			16799138, 16648313, 16148574, 15361379, 14345322, 13179768, 11921535, 10712040, 10359450, 10822581, 12159804, 13437273, 14617555, 15554967, 16446412, 17045186, 17294947,
+//			16600000, 16431034, 15919475, 15119301, 14103415, 12959827, 11716192, 10507596, 10000000, 10633937, 11952707, 13185357, 14354097, 15420470, 16173390, 16709906, 16922803,
+//			17249426, 17085693, 16534328, 15744799, 14713274, 13567752, 12236481, 11074703, 10629435, 11198537, 12554257, 13796070, 14957570, 16058010, 16863848, 17453821, 17722440,
+//			18323758, 18122442, 17524211, 16654882, 15591621, 14353333, 13027033, 11843041, 11348695, 11992220, 13286766, 14581000, 15858035, 16889517, 17728594, 18379827, 18639294,
+//			19305609, 19103740, 18466382, 17558947, 16450673, 15116156, 13775170, 12574919, 12006416, 12706999, 13991412, 15412890, 16757970, 17841657, 18793714, 19475632, 19721032,
+//			20355722, 20148117, 19460133, 18492232, 17354010, 15964139, 14550900, 13282609, 12689352, 13439806, 14735740, 16233710, 17620323, 18780869, 19779157, 20526251, 20810140,
+//			21052430, 20857414, 20164246, 19195412, 17957110, 16568152, 15091551, 13808600, 13210159, 13934212, 15262588, 16844563, 18293770, 19511790, 20547740, 21325737, 21635371,
+//			21671111, 21447888, 20735275, 19736640, 18483954, 17051302, 15524257, 14196684, 13628660, 14327017, 15706672, 17355684, 18818427, 20097209, 21201222, 21986964, 22301163,
+//			22111523, 21875510, 21137881, 20119255, 18855806, 17406338, 15840383, 14470343, 13917120, 14628988, 16023380, 17684820, 19189123, 20503193, 21619648, 22438642, 22797299,
+//			22286035, 22047524, 21290827, 20279949, 19009305, 17565804, 15986396, 14610066, 14040078, 14808862, 16182708, 17828775, 19326693, 20689403, 21846354, 22629824, 22987323,
+//		},
+//		/* Channel Gb */
+//		{			  20848664, 20601082, 19935743, 18969947, 17814577, 16356322, 14963875, 13784156, 12987988, 13653247, 15005620, 16411670, 17819383, 19098601, 19968659, 20624467, 20871295,
+//			20702724, 20456702, 19784054, 18841986, 17662040, 16239407, 14842661, 13643902, 12872006, 13556110, 14888633, 16279228, 17685812, 18924051, 19822729, 20461442, 20708594,
+//			20326292, 20104187, 19442848, 18551123, 17349915, 15952983, 14567089, 13347908, 12630290, 13302716, 14611565, 15992587, 17358083, 18572899, 19455100, 20093337, 20362368,
+//			19752205, 19560875, 18996375, 18109453, 16907483, 15537144, 14190696, 12900538, 12293299, 12940278, 14203673, 15596425, 16938403, 18115025, 18994000, 19601616, 19811871,
+//			19091832, 18927919, 18380298, 17542592, 16325979, 15061834, 13696680, 12462971, 11855602, 12519550, 13777755, 15174684, 16435785, 17542024, 18375229, 18974829, 19213251,
+//			18311786, 18132065, 17574498, 16750829, 15677036, 14454916, 13122315, 11883966, 11290078, 11920412, 13232928, 14605748, 15854840, 16878664, 17667710, 18257378, 18525422,
+//			17605214, 17436709, 16888497, 16032863, 15026699, 13821683, 12524195, 11287762, 10690757, 11395853, 12688210, 14027153, 15226066, 16211884, 17017153, 17654445, 17888551,
+//			16871727, 16716431, 16233680, 15413633, 14386301, 13229286, 11945724, 10724996, 10343002, 10838747, 12205346, 13479290, 14668286, 15658678, 16534937, 17160804, 17418194,
+//			16720147, 16521270, 15968277, 15175472, 14166477, 12989321, 11762858, 10521768, 10000000, 10656556, 11981662, 13221203, 14397400, 15488760, 16270370, 16812530, 17039985,
+//			17374324, 17169649, 16564689, 15775768, 14787608, 13596297, 12265881, 11070773, 10624788, 11205856, 12596961, 13822841, 15046228, 16131242, 16962008, 17542105, 17793709,
+//			18358572, 18177196, 17600400, 16705731, 15644035, 14407751, 13049490, 11868293, 11368951, 12012209, 13331741, 14655917, 15934273, 16990999, 17855957, 18534825, 18832689,
+//			19362648, 19131074, 18498485, 17653214, 16491208, 15152342, 13802443, 12584938, 11995685, 12733094, 14035889, 15480804, 16821691, 17928709, 18865622, 19597064, 19903717,
+//			20398573, 20194688, 19513032, 18540617, 17347220, 15979431, 14543351, 13271985, 12699858, 13436414, 14759704, 16284394, 17712126, 18881005, 19896104, 20639656, 20948030,
+//			21180952, 20926329, 20194635, 19228720, 18014781, 16632525, 15101966, 13804349, 13209016, 13955038, 15294503, 16920818, 18375807, 19613562, 20718819, 21450205, 21701993,
+//			21714900, 21486676, 20770722, 19771899, 18539983, 17057896, 15520031, 14209174, 13616774, 14324113, 15729048, 17401513, 18919667, 20158187, 21314818, 22120684, 22430743,
+//			22088645, 21861221, 21163423, 20157813, 18901492, 17426107, 15823657, 14488474, 13919998, 14635808, 16071914, 17767692, 19305359, 20600412, 21756764, 22561208, 22854907,
+//			22260337, 22057020, 21345489, 20364225, 19058870, 17603663, 15976608, 14638064, 14066616, 14802422, 16221302, 17959955, 19470362, 20851927, 21987418, 22806249, 23090950,
+//		},
+//		/* Channel B */
+//		{			  20042148, 19779193, 19172969, 18270590, 17225046, 15925687, 14671152, 13596535, 12839040, 13594736, 14775057, 16027015, 17274753, 18316906, 19146706, 19755674, 19924063,
+//			19905624, 19638707, 19016726, 18159800, 17108956, 15817874, 14571261, 13480962, 12731174, 13474939, 14658634, 15905785, 17130716, 18169551, 19006956, 19607343, 19769610,
+//			19579325, 19315516, 18694234, 17875851, 16825870, 15581940, 14319935, 13213853, 12509106, 13208632, 14411382, 15638146, 16854233, 17899261, 18712136, 19275864, 19481788,
+//			19086712, 18842130, 18266741, 17464437, 16381958, 15207200, 13959845, 12821686, 12190508, 12850784, 14060796, 15284058, 16433186, 17519629, 18301804, 18860445, 19117617,
+//			18555216, 18323317, 17724094, 16948899, 15886569, 14740598, 13492336, 12386503, 11785610, 12435383, 13632274, 14876456, 15999798, 17024503, 17811247, 18364855, 18569745,
+//			17813019, 17586310, 16991558, 16220682, 15271818, 14203200, 12944067, 11835228, 11239478, 11855430, 13095824, 14317312, 15429867, 16459116, 17182539, 17705885, 17927016,
+//			17113335, 16885054, 16338500, 15557477, 14653602, 13574716, 12384126, 11281888, 10666091, 11336881, 12574698, 13765031, 14880205, 15885932, 16574247, 17090724, 17320530,
+//			16433332, 16226231, 15700753, 15026916, 14096263, 12996269, 11845434, 10704070, 10335470, 10811618, 12067871, 13230487, 14407228, 15336181, 16046526, 16610164, 16854233,
+//			16226231, 16029145, 15517931, 14803791, 13869826, 12797764, 11650731, 10498565, 10000000, 10623009, 11872704, 13056384, 14210438, 15160213, 15879796, 16348319, 16548249,
+//			16862581, 16664084, 16084292, 15352601, 14459522, 13360708, 12168161, 11035391, 10626202, 11206023, 12446316, 13673590, 14786750, 15755091, 16541393, 17065811, 17272602,
+//			17835462, 17598189, 16978509, 16189260, 15257332, 14148086, 12923869, 11781331, 11352118, 11957718, 13153872, 14474306, 15580103, 16570832, 17359650, 17930202, 18143947,
+//			18649502, 18452363, 17868253, 17051024, 16069341, 14868284, 13632341, 12497049, 12000748, 12637268, 13871699, 15245846, 16424772, 17455482, 18268485, 18852564, 19066645,
+//			19659580, 19436412, 18783645, 17892335, 16888086, 15637264, 14358469, 13162639, 12660622, 13339126, 14604124, 15999890, 17214627, 18315636, 19187222, 19828311, 20043378,
+//			20338020, 20092437, 19387588, 18510714, 17466691, 16221203, 14850141, 13649576, 13123946, 13825423, 15084798, 16520562, 17877406, 18979458, 19878670, 20562597, 20795384,
+//			20805910, 20543415, 19870556, 18961429, 17874124, 16626438, 15225851, 14015623, 13489614, 14186063, 15496438, 16976951, 18307781, 19472764, 20407503, 21054650, 21302293,
+//			21229762, 20933528, 20235085, 19334494, 18158671, 16955010, 15514504, 14249226, 13746925, 14477667, 15794643, 17284923, 18658845, 19828665, 20807236, 21461627, 21765079,
+//			21468020, 21134999, 20381794, 19542574, 18318901, 17116080, 15671887, 14373568, 13873502, 14638411, 15961509, 17461249, 18838804, 20014246, 21036931, 21681233, 22034720,
+//
+//		},
+//	},
+//
+//};
+
+
+
+//static ISP_CMOS_DRC_S g_stIspDrc =
+//{
+//	0,
+//	10,
+//	0,
+//	2,
+//	192,
+//	60,
+//	0,
+//	0,
+//	0,
+//	{1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024}
+//};
+
+
+static ISP_CMOS_NOISE_TABLE_S g_stIspNoiseTable =
+{
+    /* bvalid */
+    1,
+
+    /* nosie_profile_weight_lut */
+    {0,  0,  0,  0,  0,  0,  0, 12, 17, 21, 24, 26, 28, 30, 31, 32,
+    33, 34, 35, 36, 37, 38, 39, 39, 40, 41, 41, 42, 42, 43, 43, 44,
+    44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49,
+    50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53,
+    53, 53, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 56, 56, 56,
+    56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58,
+    58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60,
+    60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62},
+
+    /* demosaic_weight_lut */
+    {0, 12, 17, 21, 24, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38,
+    39, 39, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 45, 46, 46,
+    46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 51, 51,
+    51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54,
+    54, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 57, 57,
+    57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59,
+    59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61,
+    61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62}
+};
+
+static ISP_CMOS_AGC_TABLE_S g_stIspAgcTable =
+{
+    /* bvalid */
+    1,
+
+    /* sharpen_alt_d */
+   {50,50,45,35,30,30,20,15},
+
+    /* sharpen_alt_ud */
+   {45,45,35,30,25,25,15,10},
+
+    //snr_thresh
+    {8,12,18,26,36,46,56,66},
+
+    /* demosaic_lum_thresh */
+    {0x50,0x50,0x40,0x40,0x30,0x30,0x20,0x20},
+
+    /* demosaic_np_offset */
+    {0x0,0xa,0x12,0x1a,0x20,0x28,0x30,0x35},
+
+    /* ge_strength */
+    {0x55,0x55,0x55,0x55,0x55,0x55,0x37,0x37}
+};
+
+static ISP_CMOS_GAMMA_S g_stIspGamma =
+{
+    /* bvalid */
+    1,
+
+#if 1
+    {0  ,120 ,220 ,310 ,390 ,470 ,540 ,610 ,670 ,730 ,786 ,842 ,894 ,944 ,994 ,1050,
+    1096,1138,1178,1218,1254,1280,1314,1346,1378,1408,1438,1467,1493,1519,1543,1568,
+    1592,1615,1638,1661,1683,1705,1726,1748,1769,1789,1810,1830,1849,1869,1888,1907,
+    1926,1945,1963,1981,1999,2017,2034,2052,2069,2086,2102,2119,2136,2152,2168,2184,
+    2200,2216,2231,2247,2262,2277,2292,2307,2322,2337,2351,2366,2380,2394,2408,2422,
+    2436,2450,2464,2477,2491,2504,2518,2531,2544,2557,2570,2583,2596,2609,2621,2634,
+    2646,2659,2671,2683,2696,2708,2720,2732,2744,2756,2767,2779,2791,2802,2814,2825,
+    2837,2848,2859,2871,2882,2893,2904,2915,2926,2937,2948,2959,2969,2980,2991,3001,
+    3012,3023,3033,3043,3054,3064,3074,3085,3095,3105,3115,3125,3135,3145,3155,3165,
+    3175,3185,3194,3204,3214,3224,3233,3243,3252,3262,3271,3281,3290,3300,3309,3318,
+    3327,3337,3346,3355,3364,3373,3382,3391,3400,3409,3418,3427,3436,3445,3454,3463,
+    3471,3480,3489,3498,3506,3515,3523,3532,3540,3549,3557,3566,3574,3583,3591,3600,
+    3608,3616,3624,3633,3641,3649,3657,3665,3674,3682,3690,3698,3706,3714,3722,3730,
+    3738,3746,3754,3762,3769,3777,3785,3793,3801,3808,3816,3824,3832,3839,3847,3855,
+    3862,3870,3877,3885,3892,3900,3907,3915,3922,3930,3937,3945,3952,3959,3967,3974,
+    3981,3989,3996,4003,4010,4018,4025,4032,4039,4046,4054,4061,4068,4075,4082,4089,4095}
+#else  /*higher  contrast*/
+    {0  , 54 , 106, 158, 209, 259, 308, 356, 403, 450, 495, 540, 584, 628, 670, 713,
+    754 ,795 , 835, 874, 913, 951, 989,1026,1062,1098,1133,1168,1203,1236,1270,1303,
+    1335,1367,1398,1429,1460,1490,1520,1549,1578,1607,1635,1663,1690,1717,1744,1770,
+    1796,1822,1848,1873,1897,1922,1946,1970,1993,2017,2040,2062,2085,2107,2129,2150,
+    2172,2193,2214,2235,2255,2275,2295,2315,2335,2354,2373,2392,2411,2429,2447,2465,
+    2483,2501,2519,2536,2553,2570,2587,2603,2620,2636,2652,2668,2684,2700,2715,2731,
+    2746,2761,2776,2790,2805,2819,2834,2848,2862,2876,2890,2903,2917,2930,2944,2957,
+    2970,2983,2996,3008,3021,3033,3046,3058,3070,3082,3094,3106,3118,3129,3141,3152,
+    3164,3175,3186,3197,3208,3219,3230,3240,3251,3262,3272,3282,3293,3303,3313,3323,
+    3333,3343,3352,3362,3372,3381,3391,3400,3410,3419,3428,3437,3446,3455,3464,3473,
+    3482,3490,3499,3508,3516,3525,3533,3541,3550,3558,3566,3574,3582,3590,3598,3606,
+    3614,3621,3629,3637,3644,3652,3660,3667,3674,3682,3689,3696,3703,3711,3718,3725,
+    3732,3739,3746,3752,3759,3766,3773,3779,3786,3793,3799,3806,3812,3819,3825,3831,
+    3838,3844,3850,3856,3863,3869,3875,3881,3887,3893,3899,3905,3910,3916,3922,3928,
+    3933,3939,3945,3950,3956,3962,3967,3973,3978,3983,3989,3994,3999,4005,4010,4015,
+    4020,4026,4031,4036,4041,4046,4051,4056,4061,4066,4071,4076,4081,4085,4090,4095,4095}
+#endif
+};
+
+HI_U32 cmos_get_isp_default(ISP_CMOS_DEFAULT_S *pstDef)
+{
+	if (HI_NULL == pstDef)
+	{
+		printf("null pointer when get isp default value!\n");
+		return -1;
+	}
+
+	memset(pstDef, 0, sizeof(ISP_CMOS_DEFAULT_S));
+
+
+//	memcpy(&pstDef->stLsc.stLscUniParaTable, &g_stCmosLscUniTable, sizeof(ISP_LSC_CABLI_UNI_TABLE_S));
+//	memcpy(&pstDef->stLsc.stLscParaTable[0], &g_stCmosLscTable[0], sizeof(ISP_LSC_CABLI_TABLE_S)*HI_ISP_LSC_LIGHT_NUM);
+//	memcpy(&pstDef->stDrc, &g_stIspDrc, sizeof(ISP_CMOS_DRC_S));
+//	memcpy(&pstDef->stDemosaic, &g_stIspDemosaic, sizeof(ISP_CMOS_DEMOSAIC_S));
+//	memcpy(&pstDef->stGe, &g_stIspGe, sizeof(ISP_CMOS_GE_S));
+//
+//	pstDef->stNoiseTbl.stNrCaliPara.u8CalicoefRow = DMNR_CALIB_CARVE_NUM_SC1135;
+//	pstDef->stNoiseTbl.stNrCaliPara.pCalibcoef    = (HI_FLOAT (*)[4])g_coef_calib_sc1135;
+//	memcpy(&pstDef->stNoiseTbl.stIsoParaTable[0], &g_stNrIsoParaTab[0],sizeof(ISP_NR_ISO_PARA_TABLE_S)*HI_ISP_NR_ISO_LEVEL_MAX);
+//
+//	memcpy(&pstDef->stRgbSharpen, &g_stIspRgbSharpen, sizeof(ISP_CMOS_RGBSHARPEN_S));
+//	memcpy(&pstDef->stUvnr,       &g_stIspUVNR,       sizeof(ISP_CMOS_UVNR_S));
+//	memcpy(&pstDef->stDpc,       &g_stCmosDpc,       sizeof(ISP_CMOS_DPC_S));
+//
+//	pstDef->stSensorMaxResolution.u32MaxWidth  = 1280;
+//	pstDef->stSensorMaxResolution.u32MaxHeight = 720;
+
+    pstDef->stComm.u8Rggb           = 0x1;      //1: rggb
+    pstDef->stComm.u8BalanceFe      = 0x1;
+
+    pstDef->stDenoise.u8SinterThresh= 0x23;
+    pstDef->stDenoise.u8NoiseProfile= 0x1;      //0: use default profile table; 1: use calibrated profile lut, the setting for nr0 and nr1 must be correct.
+    pstDef->stDenoise.u16Nr0        = 0x0;
+    pstDef->stDenoise.u16Nr1        = 546;
+
+    pstDef->stDrc.u8DrcBlack        = 0x00;
+    pstDef->stDrc.u8DrcVs           = 0x04;     // variance space
+    pstDef->stDrc.u8DrcVi           = 0x01;     // variance intensity
+    pstDef->stDrc.u8DrcSm           = 0x80;     // slope max
+    pstDef->stDrc.u16DrcWl          = 0x4FF;    // white level
+
+    memcpy(&pstDef->stNoiseTbl, &g_stIspNoiseTable, sizeof(ISP_CMOS_NOISE_TABLE_S));
+    memcpy(&pstDef->stAgcTbl, &g_stIspAgcTable, sizeof(ISP_CMOS_AGC_TABLE_S));
+    memcpy(&pstDef->stDemosaic, &g_stIspDemosaic, sizeof(ISP_CMOS_DEMOSAIC_S));
+    memcpy(&pstDef->stGamma, &g_stIspGamma, sizeof(ISP_CMOS_GAMMA_S));
+
+	return 0;
+}
+
+
+HI_U32 cmos_get_isp_black_level(ISP_CMOS_BLACK_LEVEL_S *pstBlackLevel)
+{
+	// HI_S32  i;
+
+	if (HI_NULL == pstBlackLevel)
+	{
+		printf("null pointer when get isp black level value!\n");
+		return -1;
+	}
+
+	/* Don't need to update black level when iso change */
+	pstBlackLevel->bUpdate = HI_FALSE;
+
+	pstBlackLevel->au16BlackLevel[0] = 193;
+	pstBlackLevel->au16BlackLevel[1] = 193;
+	pstBlackLevel->au16BlackLevel[2] = 193;
+	pstBlackLevel->au16BlackLevel[3] = 193;
+
+	return 0;
+
+}
+
+HI_VOID cmos_set_pixel_detect(HI_BOOL bEnable)
+{
+	HI_U32 u32Lines = VMAX_720P30_LINEAR * 30 /5;
+
+#if CMOS_SC1135_ISP_WRITE_SENSOR_ENABLE
+	if (bEnable) /* setup for ISP pixel calibration mode */
+	{
+		/* 5 fps */
+		sensor_write_register(0x320e, (u32Lines >> 4) && 0xFF);
+		sensor_write_register(0x320f, ((u32Lines<<4)&&0xF0));
+
+	}
+	else /* setup for ISP 'normal mode' */
+	{
+		sensor_write_register(0x320e, (gu32FullLinesStd >> 8) && 0XFF);
+		sensor_write_register(0x320f, gu32FullLinesStd && 0xFF);
+
+		bInit = HI_FALSE;
+	}
+#else
+	if (bEnable) /* setup for ISP pixel calibration mode */
+	{
+
+		sensor_write_register(0x3e01, (u32Lines >> 8) && 0xFF);
+		sensor_write_register(0x3e02, (u32Lines - 4) && 0xFF);
+
+		/* min gain */
+		sensor_write_register(0x3e0e, 0x00);
+		sensor_write_register(0x3e0f, 0x00);
+
+		/* 5 fps */
+		sensor_write_register(0x320e, (u32Lines >> 8) && 0xFF);
+		sensor_write_register(0x320f, u32Lines && 0xFF);
+	}
+	else /* setup for ISP 'normal mode' */
+	{
+		sensor_write_register(0x320e, (gu32FullLinesStd >> 8) && 0XFF);
+		sensor_write_register(0x320f, gu32FullLinesStd && 0xFF);
+
+		bInit = HI_FALSE;
+	}
+#endif
+
+	return;
+}
+
+HI_VOID cmos_set_wdr_mode(HI_U8 u8Mode)
+{
+	bInit = HI_FALSE;
+
+	switch(u8Mode)
+	{
+		case ISP_WDR_BUTT:
+			if (SENSOR_720P_30FPS_MODE == gu8SensorImageMode)
+			{
+				gu32FullLinesStd = VMAX_720P30_LINEAR;
+			}
+			genSensorMode = ISP_WDR_BUTT;
+			printf("linear mode\n");
+			break;
+		default:
+			printf("NOT support this mode!\n");
+			return;
+			break;
+	}
+	return;
+}
+
+HI_U32 cmos_get_sns_regs_info(ISP_SNS_REGS_INFO_S *pstSnsRegsInfo)
+{
+
+#if CMOS_SC1135_ISP_WRITE_SENSOR_ENABLE
+
+	HI_S32 i;
+
+	if (HI_FALSE == bInit)
+	{
+		g_stSnsRegsInfo.enSnsType = ISP_SNS_I2C_TYPE;
+		//g_stSnsRegsInfo.u8Cfg2ValidDelayMax = 2;
+		g_stSnsRegsInfo.u32RegNum = 6;
+		g_stSnsRegsInfo.bDelayCfgIspDgain = HI_TRUE;
+
+		for (i=0; i<g_stSnsRegsInfo.u32RegNum; i++)
+		{
+			g_stSnsRegsInfo.astI2cData[i].bDelayCfg = HI_FALSE;
+			g_stSnsRegsInfo.astI2cData[i].u8DevAddr = sensor_i2c_addr;
+			g_stSnsRegsInfo.astI2cData[i].u32AddrByteNum = sensor_addr_byte;
+			g_stSnsRegsInfo.astI2cData[i].u32DataByteNum = sensor_data_byte;
+		}
+		//g_stSnsRegsInfo.astI2cData[0].u8DelayFrmNum = 2;
+		g_stSnsRegsInfo.astI2cData[0].u32RegAddr = 0x3e01;     //exp high  bit[7:0]
+		//g_stSnsRegsInfo.astI2cData[1].u8DelayFrmNum = 2;
+		g_stSnsRegsInfo.astI2cData[1].u32RegAddr = 0x3e02;     //exp low  bit[7:4]
+		//g_stSnsRegsInfo.astI2cData[2].u8DelayFrmNum = 2;
+		g_stSnsRegsInfo.astI2cData[2].u32RegAddr = 0x3e08;     //digita agin[6:5];    coarse analog again[4:2]
+		//g_stSnsRegsInfo.astI2cData[3].u8DelayFrmNum = 2;
+		g_stSnsRegsInfo.astI2cData[3].u32RegAddr = 0x3e09;     //fine analog again[4:0]
+		//g_stSnsRegsInfo.astI2cData[4].u8DelayFrmNum = 0;
+		g_stSnsRegsInfo.astI2cData[4].bDelayCfg = HI_TRUE;
+		g_stSnsRegsInfo.astI2cData[4].u32RegAddr = 0x320e;     //TIMING_VTS  high bit[7:0]
+		//g_stSnsRegsInfo.astI2cData[5].u8DelayFrmNum = 0;
+		g_stSnsRegsInfo.astI2cData[5].bDelayCfg = HI_TRUE;
+		g_stSnsRegsInfo.astI2cData[5].u32RegAddr = 0x320f;     //TIMING_VTS  low bit[7:0]
+
+
+		bInit = HI_TRUE;
+	}
+//	else
+//	{
+//		for (i=0; i<g_stSnsRegsInfo.u32RegNum; i++)
+//		{
+//			if (g_stSnsRegsInfo.astI2cData[i].u32Data == g_stPreSnsRegsInfo.astI2cData[i].u32Data)
+//			{
+//				g_stSnsRegsInfo.astI2cData[i].bUpdate = HI_TRUE;
+//			}
+//			else
+//			{
+//				g_stSnsRegsInfo.astI2cData[i].bUpdate = HI_TRUE;
+//			}
+//		}
+//	}
+
+	if (HI_NULL == pstSnsRegsInfo)
+	{
+		printf("null pointer when get sns reg info!\n");
+		return -1;
+	}
+#endif
+	return 0;
+}
+
+static HI_S32 cmos_set_image_mode(ISP_CMOS_SENSOR_IMAGE_MODE *pstSensorImageMode)
+{
+	HI_U8 u8SensorImageMode = gu8SensorImageMode;
+
+	bInit = HI_FALSE;
+
+	if (HI_NULL == pstSensorImageMode )
+	{
+		printf("null pointer when set image mode\n");
+		return -1;
+	}
+
+	if ((pstSensorImageMode->u16Width <= 1280) && (pstSensorImageMode->u16Height <= 960))
+	{
+		if (ISP_WDR_BUTT == genSensorMode)
+		{
+			if (pstSensorImageMode->u16Fps <= 30)
+			{
+				u8SensorImageMode = SENSOR_720P_30FPS_MODE;
+			}
+			else
+			{
+				printf("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",
+						pstSensorImageMode->u16Width,
+						pstSensorImageMode->u16Height,
+						pstSensorImageMode->u16Fps,
+						genSensorMode);
+
+				return -1;
+			}
+		}
+		else
+		{
+			printf("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",
+					pstSensorImageMode->u16Width,
+					pstSensorImageMode->u16Height,
+					pstSensorImageMode->u16Fps,
+					genSensorMode);
+
+			return -1;
+		}
+	}
+	else
+	{
+		printf("Not support! Width:%d, Height:%d, Fps:%f, WDRMode:%d\n",
+				pstSensorImageMode->u16Width,
+				pstSensorImageMode->u16Height,
+				pstSensorImageMode->u16Fps,
+				genSensorMode);
+
+		return -1;
+	}
+
+	/* Sensor first init */
+	if (HI_FALSE == bSensorInit)
+	{
+		gu8SensorImageMode = u8SensorImageMode;
+		return 0;
+	}
+
+	/* Switch SensorImageMode */
+	if (u8SensorImageMode == gu8SensorImageMode)
+	{
+		/* Don't need to switch SensorImageMode */
+		return -1;
+	}
+
+	gu8SensorImageMode = u8SensorImageMode;
+
+	return 0;
+}
+
+HI_VOID sensor_global_init()
+{
+	gu8SensorImageMode = SENSOR_720P_30FPS_MODE;
+	genSensorMode = ISP_WDR_BUTT;
+	gu32FullLinesStd = VMAX_720P30_LINEAR;
+	gu32FullLines = VMAX_720P30_LINEAR;
+	bInit = HI_FALSE;
+	bSensorInit = HI_FALSE;
+
+	memset(&g_stSnsRegsInfo, 0, sizeof(ISP_SNS_REGS_INFO_S));
+}
+
+static HI_S32 cmos_get_sensor_max_resolution(ISP_CMOS_SENSOR_MAX_RESOLUTION *pstSensorMaxResolution)
+{
+    if (HI_NULL == pstSensorMaxResolution)
+    {
+        printf("null pointer when get sensor max resolution \n");
+        return -1;
+    }
+
+    memset(pstSensorMaxResolution, 0, sizeof(ISP_CMOS_SENSOR_MAX_RESOLUTION));
+
+    pstSensorMaxResolution->u32MaxWidth  = 1280;
+    pstSensorMaxResolution->u32MaxHeight = 720;
+
+    return 0;
+}
+
+HI_S32 cmos_init_sensor_exp_function(ISP_SENSOR_EXP_FUNC_S *pstSensorExpFunc)
+{
+	memset(pstSensorExpFunc, 0, sizeof(ISP_SENSOR_EXP_FUNC_S));
+
+	pstSensorExpFunc->pfn_cmos_sensor_init = sensor_init;
+	//pstSensorExpFunc->pfn_cmos_sensor_exit = sensor_exit;
+	pstSensorExpFunc->pfn_cmos_sensor_global_init = sensor_global_init;
+	//pstSensorExpFunc->pfn_cmos_set_image_mode = cmos_set_image_mode;
+	pstSensorExpFunc->pfn_cmos_set_wdr_mode = cmos_set_wdr_mode;
+
+	pstSensorExpFunc->pfn_cmos_get_isp_default = cmos_get_isp_default;
+	pstSensorExpFunc->pfn_cmos_get_isp_black_level = cmos_get_isp_black_level;
+	pstSensorExpFunc->pfn_cmos_set_pixel_detect = cmos_set_pixel_detect;
+	//pstSensorExpFunc->pfn_cmos_get_sns_reg_info = cmos_get_sns_regs_info;
+
+    pstSensorExpFunc->pfn_cmos_get_sensor_max_resolution = cmos_get_sensor_max_resolution;
+    return 0;
+}
+
+/****************************************************************************
+ * callback structure                                                       *
+ ****************************************************************************/
+
+int sensor_register_callback(void)
+{
+	ISP_DEV IspDev = 0;
+	HI_S32 s32Ret;
+	ALG_LIB_S stLib;
+	ISP_SENSOR_REGISTER_S stIspRegister;
+	AE_SENSOR_REGISTER_S  stAeRegister;
+	AWB_SENSOR_REGISTER_S stAwbRegister;
+
+	cmos_init_sensor_exp_function(&stIspRegister.stSnsExp);
+	s32Ret = HI_MPI_ISP_SensorRegCallBack(SC1135_ID, &stIspRegister);
+	if (s32Ret)
+	{
+		printf("sensor register callback function failed!\n");
+		return s32Ret;
+	}
+
+	stLib.s32Id = 0;
+	strncpy(stLib.acLibName, HI_AE_LIB_NAME, sizeof(HI_AE_LIB_NAME));
+	cmos_init_ae_exp_function(&stAeRegister.stSnsExp);
+	s32Ret = HI_MPI_AE_SensorRegCallBack(&stLib, SC1135_ID, &stAeRegister);
+	if (s32Ret)
+	{
+		printf("sensor register callback function to ae lib failed!\n");
+		return s32Ret;
+	}
+
+	stLib.s32Id = 0;
+	strncpy(stLib.acLibName, HI_AWB_LIB_NAME, sizeof(HI_AWB_LIB_NAME));
+	cmos_init_awb_exp_function(&stAwbRegister.stSnsExp);
+	s32Ret = HI_MPI_AWB_SensorRegCallBack(&stLib, SC1135_ID, &stAwbRegister);
+	if (s32Ret)
+	{
+		printf("sensor register callback function to ae lib failed!\n");
+		return s32Ret;
+	}
+
+	return 0;
+}
+
+int sensor_unregister_callback(void)
+{
+	ISP_DEV IspDev = 0;
+	HI_S32 s32Ret;
+	ALG_LIB_S stLib;
+
+	s32Ret = HI_MPI_ISP_SensorUnRegCallBack(SC1135_ID);
+	if (s32Ret)
+	{
+		printf("sensor unregister callback function failed!\n");
+		return s32Ret;
+	}
+
+	stLib.s32Id = 0;
+	strncpy(stLib.acLibName, HI_AE_LIB_NAME, sizeof(HI_AE_LIB_NAME));
+	s32Ret = HI_MPI_AE_SensorUnRegCallBack(&stLib, SC1135_ID);
+	if (s32Ret)
+	{
+		printf("sensor unregister callback function to ae lib failed!\n");
+		return s32Ret;
+	}
+
+	stLib.s32Id = 0;
+	strncpy(stLib.acLibName, HI_AWB_LIB_NAME, sizeof(HI_AWB_LIB_NAME));
+	s32Ret = HI_MPI_AWB_SensorUnRegCallBack(&stLib, SC1135_ID);
+	if (s32Ret)
+	{
+		printf("sensor unregister callback function to ae lib failed!\n");
+		return s32Ret;
+	}
+
+	return 0;
+}
+
+#ifdef __cplusplus
+#if __cplusplus
+}
+#endif
+#endif /* End of #ifdef __cplusplus */
+
+#endif /* __SC1135_CMOS_H_ */
diff --git a/mpp2/component/isp2/sensor/smartsens_sc1135/sc1135_sensor_ctl.c b/mpp2/component/isp2/sensor/smartsens_sc1135/sc1135_sensor_ctl.c
new file mode 100644
index 0000000..ad920fb
--- /dev/null
+++ b/mpp2/component/isp2/sensor/smartsens_sc1135/sc1135_sensor_ctl.c
@@ -0,0 +1,358 @@
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/ioctl.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#include "hi_comm_video.h"
+
+#ifdef HI_GPIO_I2C
+#include "gpioi2c_ex.h"
+#else
+#include "hi_i2c.h"
+#endif
+
+const unsigned char sensor_i2c_addr	    =	0x60;		/* I2C Address of SC1135 */
+const unsigned int  sensor_addr_byte	=	2;
+const unsigned int  sensor_data_byte	=	1;
+static int g_fd = -1;
+static int flag_init = 0;
+
+extern HI_U8 gu8SensorImageMode;
+extern HI_BOOL bSensorInit;
+
+int sensor_i2c_init(void)
+{
+	if(g_fd >= 0)
+	{
+		return 0;
+	}
+#ifdef HI_GPIO_I2C
+	int ret;
+
+	g_fd = open("/dev/gpioi2c_ex", 0);
+	if(g_fd < 0)
+	{
+		printf("Open gpioi2c_ex error!\n");
+		return -1;
+	}
+#else
+//	int ret;
+//
+//	g_fd = open("/dev/i2c-0", O_RDWR);
+//	if(g_fd < 0)
+//	{
+//		printf("Open /dev/i2c-0 error!\n");
+//		return -1;
+//	}
+//
+//	ret = ioctl(g_fd, I2C_SLAVE_FORCE, sensor_i2c_addr);
+//	if (ret < 0)
+//	{
+//		printf("CMD_SET_DEV error!\n");
+//		return ret;
+//	}
+#endif
+
+	return 0;
+}
+
+
+int sensor_i2c_exit(void)
+{
+	if (g_fd >= 0)
+	{
+		close(g_fd);
+		g_fd = -1;
+		return 0;
+	}
+	return -1;
+}
+
+
+int sensor_read_register(int addr)
+{
+	// TODO:
+
+	return 0;
+}
+
+int sensor_write_register(int addr, int data)
+{
+#ifdef HI_GPIO_I2C
+    int fd = -1;
+    int ret;
+    I2C_DATA_S i2c_data;
+
+    fd = open("/dev/gpioi2c_ex", 0);
+    if(fd<0)
+    {
+        printf("Open gpioi2c_ex error!\n");
+        return -1;
+    }
+
+    i2c_data.dev_addr = sensor_i2c_addr;
+    i2c_data.reg_addr = addr;
+    i2c_data.addr_byte_num = sensor_addr_byte;
+    i2c_data.data = data;
+    i2c_data.data_byte_num = sensor_data_byte;
+
+    ret = ioctl(fd, GPIO_I2C_WRITE, &i2c_data);
+
+    if (ret)
+    {
+        printf("GPIO-I2C write faild!\n");
+        close(fd);
+        return -1;
+    }
+
+    close(fd);
+#else
+    int fd = -1;
+    int ret;
+    I2C_DATA_S i2c_data;
+
+    fd = open("/dev/hi_i2c", 0);
+    if(fd<0)
+    {
+        printf("Open hi_i2c error!\n");
+        return -1;
+    }
+
+    i2c_data.dev_addr = sensor_i2c_addr;
+    i2c_data.reg_addr = addr;
+    i2c_data.addr_byte_num = sensor_addr_byte;
+    i2c_data.data = data;
+    i2c_data.data_byte_num = sensor_data_byte;
+
+    ret = ioctl(fd, CMD_I2C_WRITE, &i2c_data);
+
+    if (ret)
+    {
+        printf("hi_i2c write faild!\n");
+        close(fd);
+        return -1;
+    }
+
+    close(fd);
+#endif
+	return 0;
+}
+
+static void delay_ms(int ms) {
+	usleep(ms*1000);
+}
+
+void sensor_prog(int* rom)
+{
+	int i = 0;
+	while (1) {
+		int lookup = rom[i++];
+		int addr = (lookup >> 16) & 0xFFFF;
+		int data = lookup & 0xFFFF;
+		if (addr == 0xFFFE) {
+			delay_ms(data);
+		} else if (addr == 0xFFFF) {
+			return;
+		} else {
+			sensor_write_register(addr, data);
+		}
+	}
+}
+
+void sensor_linear_720p30_init();
+
+#define SENSOR_1080P_30FPS_MODE  (1)
+
+void sensor_init()
+{
+	sensor_i2c_init();
+#if 0
+	/* When sensor first init, config all registers */
+	if (HI_FALSE == bSensorInit)
+	{
+		if(SENSOR_720P_25FPS_MODE == gu8SensorImageMode)
+		{
+			sensor_linear_720p25_init();
+		}
+	}
+	/* When sensor switch mode(linear<->WDR or resolution), config different registers(if possible) */
+	else
+	{
+		if(SENSOR_720P_25FPS_MODE == gu8SensorImageMode)
+		{
+			sensor_linear_720p25_init();
+		}
+	}
+#endif
+	sensor_linear_720p30_init();
+
+	return ;
+}
+
+void sensor_exit()
+{
+	sensor_i2c_exit();
+	flag_init = 0;
+	return;
+}
+
+void sensor_linear_720p30_init()
+{
+	sensor_write_register(0x3000,0x01);//manualstreamenbale
+	sensor_write_register(0x3003,0x01);//softreset
+	sensor_write_register(0x3400,0x53);
+	sensor_write_register(0x3416,0xc0);
+	sensor_write_register(0x3d08,0x00);
+	sensor_write_register(0x3e03,0x03);
+	sensor_write_register(0x3928,0x00);
+	sensor_write_register(0x3630,0x58);
+	sensor_write_register(0x3612,0x00);
+	sensor_write_register(0x3632,0x41);
+	sensor_write_register(0x3635,0x00); //20160328
+	sensor_write_register(0x3620,0x44);
+	sensor_write_register(0x3633,0x7f); //20160422
+	sensor_write_register(0x3780,0x0b);
+	sensor_write_register(0x3300,0x33);
+	sensor_write_register(0x3301,0x38);
+	sensor_write_register(0x3302,0x30);
+	sensor_write_register(0x3303,0x80); //20160307B  20160412
+	sensor_write_register(0x3304,0x18);
+	sensor_write_register(0x3305,0x72);
+	sensor_write_register(0x331e,0x30); //20160512
+	sensor_write_register(0x321e,0x00);
+	sensor_write_register(0x321f,0x0a);
+	sensor_write_register(0x3216,0x0a);
+	sensor_write_register(0x3332,0x38);
+	sensor_write_register(0x5054,0x82);
+	sensor_write_register(0x3622,0x26);
+	sensor_write_register(0x3907,0x02);
+	sensor_write_register(0x3908,0x00);
+	sensor_write_register(0x3601,0x1a); //20160422
+	sensor_write_register(0x3315,0x44);
+	sensor_write_register(0x3308,0x40);
+	sensor_write_register(0x3223,0x22);//vysncmode[5]
+	sensor_write_register(0x3e0e,0x50);
+	/*DPC*/
+	sensor_write_register(0x3211,0x60);
+	sensor_write_register(0x5780,0xff);
+	sensor_write_register(0x5781,0x04); //20160328
+	sensor_write_register(0x5785,0x0c); //20160328
+	sensor_write_register(0x5000,0x66);
+
+	sensor_write_register(0x3e0f,0x90);
+	sensor_write_register(0x3631,0x80);
+	sensor_write_register(0x3310,0x83);
+	sensor_write_register(0x3336,0x01);
+	sensor_write_register(0x3337,0x00);
+	sensor_write_register(0x3338,0x03);
+	sensor_write_register(0x3339,0xe8);
+	sensor_write_register(0x3335,0x06); //20160418
+	sensor_write_register(0x3880,0x00);
+
+	//power reduction 20160606
+	sensor_write_register(0x3620,0x42);
+	sensor_write_register(0x3610,0x03);
+	sensor_write_register(0x3600,0x64);
+	sensor_write_register(0x3636,0x0d);
+	sensor_write_register(0x3323,0x80);
+	//io strength
+	//sensor_write_register(0x3640,0x03);
+
+#if 0
+	//960 p
+	/*27Minput54Moutputpixelclockfrequency*/
+	sensor_write_register(0x3010,0x07);
+	sensor_write_register(0x3011,0x46);
+	sensor_write_register(0x3004,0x04);
+	//  sensor_write_register(0x3610,0x2b);  //20160606
+
+	/*configFramelengthandwidth*/
+	sensor_write_register(0x320c,0x07); //1800
+	sensor_write_register(0x320d,0x08); //1000
+	sensor_write_register(0x320e,0x03);
+	sensor_write_register(0x320f,0xe8);
+
+	/*configOutputwindowposition*/
+	sensor_write_register(0x3210,0x00);
+	sensor_write_register(0x3211,0x60);
+	sensor_write_register(0x3212,0x00);
+	sensor_write_register(0x3213,0x04); //for BGGR out format 20160412
+
+	/*configOutputimagesize*/
+	sensor_write_register(0x3208,0x05);
+	sensor_write_register(0x3209,0x00);
+	sensor_write_register(0x320a,0x03);
+	sensor_write_register(0x320b,0xc0);
+
+	/*configFramestartphysicalposition*/
+	sensor_write_register(0x3202,0x00);
+	sensor_write_register(0x3203,0x08);
+	sensor_write_register(0x3206,0x03);
+	sensor_write_register(0x3207,0xcf);
+
+	/*powerconsumptionreduction*/
+	sensor_write_register(0x3330,0x0d);
+	sensor_write_register(0x3320,0x06);
+	sensor_write_register(0x3321,0xd8);
+	sensor_write_register(0x3322,0x01);
+	//  sensor_write_register(0x3323,0x80); //20160606
+	//  sensor_write_register(0x3600,0x54); //20160606
+
+	printf("SC1135 960p 30fps sensor init OK!\n");
+
+#else
+
+	//720p
+	/*27Minput54Moutputpixelclockfrequency*/
+	sensor_write_register(0x3010,0x07);
+	sensor_write_register(0x3011,0x46);
+	sensor_write_register(0x3004,0x04);
+	//  sensor_write_register(0x3610,0x2b); //201600606
+
+	/*configFramelengthandwidth*/
+	sensor_write_register(0x320c,0x07); //1800
+	sensor_write_register(0x320d,0x08); //1000
+	sensor_write_register(0x320e,0x03);
+	sensor_write_register(0x320f,0xe8);
+
+	/*configOutputwindowposition*/
+	sensor_write_register(0x3210,0x00);
+	sensor_write_register(0x3211,0x60);
+	sensor_write_register(0x3212,0x00);
+	sensor_write_register(0x3213,0x80);  //for BGGR out format 20160412
+
+	/*configOutputimagesize*/
+	sensor_write_register(0x3208,0x05);
+	sensor_write_register(0x3209,0x00);
+	sensor_write_register(0x320a,0x02);
+	sensor_write_register(0x320b,0xd0);
+
+	/*configFramestartphysicalposition*/
+	sensor_write_register(0x3202,0x00);
+	sensor_write_register(0x3203,0x08);
+	sensor_write_register(0x3206,0x03);
+	sensor_write_register(0x3207,0xcf);
+
+	/*powerconsumptionreduction*/
+	sensor_write_register(0x3330,0x0d);
+	sensor_write_register(0x3320,0x06);
+	sensor_write_register(0x3321,0xd8);
+	sensor_write_register(0x3322,0x01);
+	// sensor_write_register(0x3323,0x80); //20160606
+	// sensor_write_register(0x3600,0x54); //20160606
+
+	printf("SC1135 720p 30fps sensor init OK!~~~~~~~~~~~~~~~~\n");
+#endif
+
+	bSensorInit = HI_TRUE;
+	printf("=========================================================\n");
+	printf("============== SC1135 sensor init success! ==============\n");
+	printf("=========================================================\n");
+
+	//sensor_write_register(0x503d,0x008);
+
+	return;
+}
+
-- 
2.7.4

